#ifndef WEIGHTS 
#define WEIGHTS

#include "functions.h"




constexpr int

weight_val_pawn = S(89, 92),
weight_val_knight = S(367, 225),
weight_val_bishop = S(425, 259),
weight_val_rook = S(584, 465),
weight_val_queen = S(1228, 868), 

weight_isolated_pawn = S(-14, -2),
weight_backward_pawn = S(-9, -6),
weight_double_pawn = S(-3, -20),
weight_pawn_hole = S(-8, 0), 
arr_weight_pawn_chain[8] = { S(   0,   0), S(   0,   0), S(   5,  13), S(  23,   6), S(  28,  30), S(  39,  29), S(   0,   0), S(   0,   0), }, 
arr_weight_phalanx_pawn[8] = { S(   0,   0), S(   3,  -5), S(  -4,  -3), S(   8,   3), S(  15,  16), S(  72,  50), S(  56, 148), S(   0,   0), }, 
arr_weight_defended_phalanx_pawn[8] = { S(   0,   0), S(   0,   0), S(   4,   7), S(  16,   9), S(  31,  44), S(  52,  34), S(  14,  18), S(   0,   0), }, 
arr_weight_passed_pawn[8] = { S(   0,   0), S(  -7,   4), S( -14,   7), S( -18,  26), S(  -8,  48), S(  -8, 120), S(  17, 128), S(   0,   0), }, 
arr_weight_defended_passed_pawn[8] = { S(   0,   0), S(   0,   0), S(  -1,  17), S(  -3,  33), S(  29,  64), S(  74, 144), S( 208, 153), S(   0,   0), }, 

weight_knight_all_pawns_count = S(4, 6), 
weight_knight_outpost = S(11, 4), 
weight_undefended_knight = S(-13, 1), 
weight_knight_defended_by_pawn = S(-7, 0), 

weight_bishop_pair = S(33, 53),weight_undefended_bishop = S(-5, -1),

weight_rook_behind_stm_passed_pawn = S(17, -8), 
weight_rook_behind_opp_passed_pawn = S(-18, 19), 
weight_rook_flank_outpost = S(-6, 4), 
weight_rook_half_open_file = S(18, 6), 
weight_rook_open_file = S(40, -8), 
weight_rook_enemy_queen_same_file = S(11, -13), 
weight_rook_on_seventh_rank = S(2, 8), 
weight_rook_on_eight_rank = S(11, 6), 
weight_rook_supporting_friendly_rook = S(33, -3), 

weight_queen_underdeveloped_pieces = S(-7, 5), 

arr_weight_knight_mobility[16] = { 

S( -39, -60), S(  -8, -42), S(   1, -24), S(   8, -21), S(  15, -17), S(  20, -12), S(  26, -12), S(  28,  -9), 
S(  40, -22), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
}, 
arr_weight_bishop_mobility[16] = { 

S( -11, -35), S(  -6, -27), S(   5, -24), S(   8, -15), S(  14, -11), S(  19,  -3), S(  21,   0), S(  24,   2), 
S(  25,   4), S(  34,  -2), S(  41,  -4), S(  47,  -8), S(  58,   2), S(  44,  -8), S(   0,   0), S(   0,   0), 
}, 
arr_weight_rook_mobility[16] = { 

S( -15, -40), S(  -5, -19), S(  -2, -17), S(   0, -13), S(  -1,  -8), S(   6,  -7), S(   8,  -3), S(   8,   0), 
S(  15,  -1), S(  21,  -2), S(  17,   3), S(  18,   9), S(  26,  15), S(  36,   6), S(  32,  10), S(   0,   0), 
}, 
arr_weight_queen_mobility[32] = { 

S( -12,  16), S(  -5, -81), S(  -4, -68), S(  -6, -62), S(  -3, -59), S(  -1, -32), S(   2, -38), S(  -1, -18), 
S(   2, -10), S(   7,  -2), S(   7,   4), S(   7,  -1), S(   7,   8), S(  10,  12), S(  13,   6), S(  13,  16), 
S(   2,  26), S(  17,  17), S(  18,  17), S(   8,  21), S(  12,  22), S(  12,  26), S(  30,  -5), S(  56, -19), 
S(  51, -19), S(  42, -11), S(  37,  -6), S(   2, -12), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
}, 


weight_pawn_shield[8][8] = { 

S( -26,   0), S(  13, -29), S(  17, -14), S(  -3,  -2), S(   0,  12), S(  11,  23), S(  22,  25), S(   0,   0), 
S( -31,   4), S(  24, -16), S(  16,  -8), S( -15,   1), S( -23,  21), S( -48,  28), S( -38,  39), S(   0,   0), 
S( -25,   0), S(  27, -13), S(  -7,  -2), S(  -7,   1), S( -11,   4), S(  -8,  17), S(  13,  26), S(   0,   0), 
S( -16,  -6), S(   3,  -8), S(   3,  -2), S(  -1,   4), S( -14,  10), S( -34,  22), S( -40,  39), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
}, 
weight_blocked_pawn_storm[8][8] = { 

S(   0,   0), S(   0,   0), S(   0, -47), S(  27, -22), S(  18, -31), S(  32, -52), S(   9, -53), S(   0,   0), 
S(   0,   0), S(   0,   0), S( -50, -35), S(  22, -26), S(  -2, -18), S(   9, -40), S(  33, -47), S(   0,   0), 
S(   0,   0), S(   0,   0), S( -43,  -3), S( -18,  -8), S(  -1, -24), S(  -7, -27), S( -14, -32), S(   0,   0), 
S(   0,   0), S(   0,   0), S( -13, -48), S(  -3, -17), S(   6, -24), S(   8, -19), S(  41, -42), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
}, 
weight_unblocked_pawn_storm[8][8] = { 

S(   1, -24), S(  21, 191), S( -22, 131), S( -34,  48), S(  -5,   1), S(   6, -16), S(   9, -13), S(   0,   0), 
S(   4, -18), S(  27, 195), S( -40, 126), S( -10,  38), S(  -4,   6), S(   8,  -8), S(   3,  -8), S(   0,   0), 
S(   2, -18), S( -23, 159), S( -97, 111), S(  -7,  29), S(  -1,   2), S(   1, -11), S(  14, -15), S(   0,   0), 
S( -10,   0), S( -33, 154), S( -49,  99), S( -20,  22), S(  -5,   3), S(   0,   1), S(  -8,  -1), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
}, 
weight_knight_attack = S(16, 33), 
weight_bishop_attack = S(11, 33), 
weight_rook_attack = S(9, 33), 
weight_queen_attack = S(11, 34), 
weight_safe_knight_check = S(128, 0), 
weight_safe_bishop_check = S(36, 292), 
weight_safe_rook_check = S(75, 11), 
weight_safe_queen_check = S(40, 52), 
weight_unsafe_knight_check = S(13, 0), 
weight_unsafe_bishop_check = S(25, 139), 
weight_unsafe_rook_check = S(36, -11), 
weight_unsafe_queen_check = S(21, 18), 
weight_safety_adjustment = S(82, -67), 


pawnPSQT[U8_MAX_SQUARES] = {

S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S( -11,   3), S( -14,  -1), S( -16,  -1), S( -14,  -8), S( -14,  -5), S(  -9,   1), S(  12,  -5), S(  -4,  -5), 
S(  -8,  -5), S( -13,  -7), S(   4, -14), S(   6, -17), S(  14, -15), S(  -3,  -7), S(  13, -10), S( -12, -11), 
S( -17,   2), S( -17,   0), S(   3, -16), S(  14, -27), S(  16, -28), S(   3, -10), S( -10,  -2), S( -38,  -6), 
S(  -3,  15), S(  -3,   8), S(  -4,  -2), S(  15, -27), S(  24, -27), S(   5,   1), S(   4,   5), S( -26,   6), 
S(  -7,  31), S(  -6,  23), S(  22,   8), S(   3, -22), S(  34, -30), S(  40,  -2), S(  10,  13), S( -11,  17), 
S(  23,  73), S(   8,  71), S( -10,  59), S(  23,  22), S(  49,   9), S(  41,  45), S(  31,  74), S( -44,  65), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
},

knightPSQT[U8_MAX_SQUARES] = {

S( -45, -29), S(  -8, -13), S( -37,  -8), S( -14,  -5), S(  -8, -17), S( -11,  -4), S( -10, -23), S( -58,  -9), 
S(  -8, -19), S( -22, -11), S(   0, -15), S(  10, -12), S(  15, -18), S(   1,  -8), S(   6, -15), S(  -1, -25), 
S( -15, -14), S(   0,  -7), S(   6, -16), S(   7,   9), S(  15,   6), S(   8, -18), S(  23, -20), S( -19, -22), 
S(   5,  -9), S(   3,   1), S(  11,  12), S(   9,  14), S(  10,  16), S(  18,   1), S(  -5,  -1), S(  -3,  -5), 
S(  19,  -7), S(  16,   5), S(   5,  16), S(  34,  20), S(  21,  12), S(  16,  18), S(  20,   6), S(  29, -14), 
S( -17, -20), S(  10, -14), S(  10,  11), S(  57,   4), S(  80, -17), S( 111, -14), S(  50, -22), S(  -7, -10), 
S( -71, -16), S( -36,  -5), S(  75, -29), S(  12,  -5), S(  84, -29), S(  68, -29), S(   2, -18), S( -11, -30), 
S(-223,  -4), S( -42, -40), S( -60, -12), S( -38,  -6), S(  11, -20), S(-115, -11), S( -83, -23), S(-110, -65), 
},

bishopPSQT[U8_MAX_SQUARES] = {

S(  15, -22), S(   0,  -5), S(  11,  -6), S(   8,  -1), S(   0,  -4), S(  -7,   0), S(   4, -21), S(  14, -19), 
S( -11,  -3), S(  37, -16), S(  14,  -8), S(  10,   0), S(  15,   0), S(  22,  -8), S(  47, -15), S(  11, -22), 
S(  29, -17), S(  19,   3), S(  20,   5), S(   2,  13), S(  12,  10), S(  24,   0), S(   9,  -8), S(  17, -15), 
S(  -8,  -7), S(  -4,   1), S(   1,  10), S(  21,   6), S(  20,   8), S(   3,  11), S(   5,  -6), S( -17, -11), 
S( -27,   7), S(  -5,  11), S(   1,   8), S(   9,  18), S(  21,  10), S( -22,  10), S(  14,  -6), S( -14,  -5), 
S( -25,   2), S( -11,   6), S(  38,  -2), S(   0,  12), S(  43,  -2), S(  45,  10), S(  31,  -3), S(  21,  -8), 
S( -48,  -6), S( -12,   1), S( -20,   1), S( -12, -10), S(  -3,  -4), S(  54, -18), S(  -4,   1), S(  10, -31), 
S( -35,  -4), S( -51, -15), S( -23, -18), S( -76,   0), S(-100,   4), S( -27,  -6), S(  -6, -15), S( -54,   2), 
},

rookPSQT[U8_MAX_SQUARES] = {

S(  -1,   1), S(  -1,  -3), S(   5,  -3), S(   8,  -1), S(  18, -13), S(  18,  -9), S( -14,  -7), S(  16, -29), 
S( -20,  -6), S( -18,  -3), S( -19,   6), S(  -9,   0), S(  -1,  -7), S(   2, -10), S(  17, -15), S( -32,  -6), 
S( -17,  -5), S( -15,  -3), S( -16,  -1), S(   4,  -7), S(   3,  -6), S(  11, -15), S(  18, -21), S(  13, -20), 
S( -23,   5), S( -35,   9), S( -35,  13), S( -24,  10), S( -19,   9), S( -12,  -2), S(  -1,  -8), S(  -3, -13), 
S( -30,  10), S( -13,   4), S(  -8,   8), S(  10,   1), S( -13,   4), S(   2,   1), S(  19,  -5), S(  18,  -5), 
S(  -3,   8), S(  -9,   9), S( -20,  10), S(   5,   2), S(  30,  -5), S(  33,  -5), S(  63, -11), S(  27,  -8), 
S( -24,   8), S( -45,  24), S(  -4,  10), S(  35,  -2), S(  -4,   1), S(  58, -13), S(  71, -16), S(  46, -17), 
S( -16,  16), S(   8,   6), S(  -7,  12), S(   7,   2), S(  32,  -3), S(  52, -11), S(  45,  -9), S(  -6,   5), 
},

queenPSQT[U8_MAX_SQUARES] = {

S(  15, -26), S(  12, -37), S(  15, -34), S(  20, -33), S(  17, -23), S(   3, -35), S( -13, -32), S(  10, -39), 
S(   7, -20), S(   8, -12), S(  11, -14), S(  16, -11), S(  20, -16), S(  31, -55), S(  31, -50), S(  15, -28), 
S(   3, -42), S(  12, -40), S(   0,  15), S(   6, -15), S(   5,   2), S(  16,  -8), S(  14,   7), S(   3, -14), 
S(   1, -23), S( -17,  19), S( -12,   5), S( -19,  35), S(  -3,  15), S(   5,  -5), S(   2,  10), S(  -1,  -4), 
S( -29,  -5), S( -10,   2), S( -26,   6), S( -29,  35), S( -14,  39), S( -19,  45), S( -17,  32), S(   6,   9), 
S( -28, -20), S( -26,  -4), S(   3,   3), S(  -5,  11), S(  13,  49), S(  18,  17), S(  74, -15), S(  15,   5), 
S( -37,  11), S( -49,  10), S( -49,  32), S( -66,  69), S( -67,  62), S(  54,  46), S( -11,  57), S( 101, -50), 
S( -29,  -1), S( -12,   1), S(  12,   0), S(  26,  21), S(  37,  12), S(  41,  12), S(   9, -10), S( -12,  37), 
},

kingPSQT[U8_MAX_SQUARES] = {

S( -40, -34), S(  12, -22), S(   8, -23), S( -27, -25), S(  11, -39), S( -44, -14), S(   4, -20), S(  -4, -46), 
S(  25, -28), S(  -3,  -3), S(  -4,  -1), S( -28,   7), S( -37,   6), S( -29,   9), S(   0,   8), S(  -4, -13), 
S(  21, -23), S(  45,  -2), S( -20,  10), S( -36,  15), S( -35,  15), S( -19,  14), S(   8,  12), S( -40,   2), 
S(  34, -22), S(  54,   2), S(  36,   7), S( -28,  16), S( -15,  14), S( -37,  21), S( -12,  19), S( -71,  12), 
S(  20, -14), S(  32,  13), S(  64,   7), S(  25,   9), S(  14,   9), S(  20,  21), S(  33,  27), S( -27,  18), 
S(  46,  -5), S( 136,  11), S(  64,   7), S(  71,  -4), S(  20,   7), S(  95,  15), S(  96,  34), S(   7,  21), 
S(  14,  -7), S( 104,   9), S(  78,  -6), S(  55, -12), S(  50,  -9), S( 108,   5), S(  22,  33), S( -24,  20), 
S(  39, -39), S(  58,  -7), S(  82, -28), S(  58, -30), S(  83, -28), S(  74, -14), S(  30,   5), S(   1, -18), 
};




#endif
