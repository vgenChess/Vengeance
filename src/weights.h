#ifndef weights_h
#define weights_h 

#include "functions.h"

int 

weight_val_pawn = S(88, 91),
weight_val_knight = S(368, 284),
weight_val_bishop = S(373, 300),
weight_val_rook = S(483, 536),
weight_val_queen = S(1058, 1015), 

weight_isolated_pawn = S(-13, -4),
weight_backward_pawn = S(-7, -6),
weight_double_pawn = S(-6, -17),
weight_defended_pawn = S(10, 6),
weight_pawn_hole = S(-8, 1), 
arr_weight_passed_pawn[8] = { S(0, 0), S(0, 6), S(-5, 10), S(-14, 33), S(4, 57), S(11, 115), S(58, 159), S(0, 0), }, 
arr_weight_defended_passed_pawn[8] = { S(0, 0), S(0, 0), S(-2, 14), S(-2, 33), S(10, 65), S(77, 120), S(155, 127), S(0, 0), }, 

weight_undefended_knight = S(-11, 4), 
weight_knight_defended_by_pawn = S(3, 14), 

weight_bishop_pair = S(30, 50), 


weight_rook_half_open_file = S(19, 13), 
weight_rook_open_file = S(52, -4), 
weight_rook_enemy_queen_same_file = S(13, 15), 
weight_rook_on_seventh_rank = S(4, 12), 
weight_rook_on_eight_rank = S(14, 11), 
weight_rook_supporting_friendly_rook = S(0, 14), 

weight_queen_underdeveloped_pieces = S(-4, -10), 

weight_king_pawn_shield = S(14, 0), 
weight_king_enemy_pawn_storm = S(-40, 25), 

arr_weight_knight_mobility[16] = { 

S(-22, -66), S(-6, -16), S(2, -6), S(5, -2), S(14, -1), S(18, 0), S(22, -6), S(30, -8), 
S(44, -24), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 

}, 
arr_weight_bishop_mobility[16] = { 

S(-17, -51), S(-8, -40), S(-1, -19), S(5, -11), S(9, -1), S(13, 2), S(18, 5), S(19, 8), 
S(22, 10), S(26, 6), S(22, 8), S(31, 4), S(14, 10), S(26, 11), S(0, 0), S(0, 0), 

}, 
arr_weight_rook_mobility[16] = { 

S(-21, -61), S(-13, -35), S(-11, -15), S(-7, -8), S(-6, -1), S(0, 3), S(3, 5), S(6, 9), 
S(11, 7), S(17, 8), S(19, 10), S(22, 11), S(32, 15), S(46, 5), S(24, 15), S(0, 0), 

}, 
arr_weight_queen_mobility[32] = { 

S(-4, -32), S(-9, -40), S(-7, -73), S(-9, -94), S(-6, -70), S(-3, -42), S(-3, -47), S(-5, -34), 
S(-1, -27), S(1, -16), S(2, -12), S(1, -3), S(3, 11), S(7, 10), S(7, 15), S(12, 19), 
S(10, 25), S(16, 29), S(20, 32), S(34, 29), S(30, 33), S(38, 38), S(38, 49), S(55, 40), 
S(63, 35), S(61, 49), S(42, 39), S(53, 50), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 

}, 

weight_center_control = S(3, 1), 

weight_knight_attack = S(40, -10), 
weight_bishop_attack = S(64, 16), 
weight_rook_attack = S(57, 16), 
weight_queen_attack = S(88, 16), 
weight_rook_safe_contact_check = S(77, 26), 
weight_queen_safe_contact_check = S(153, 115), 
weight_knight_check = S(88, -38), 
weight_bishop_check = S(99, 62), 
weight_rook_check = S(72, -27), 
weight_queen_check = S(76, -32), 
weight_safety_adjustment = S(11, -32);

int whitePawnPSQT[64] = {

S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S( -14,   5), S( -19,  -1), S( -26,   3), S( -22,  -1), S( -24,  11), S(  12,  -6), S(  19, -12), S(  -8, -16), 
S( -14,  -3), S( -24,   0), S( -11,  -9), S( -13,  -5), S(  -4,  -4), S(   5, -10), S(  16, -16), S(  -4, -15), 
S( -14,   9), S( -16,   5), S(   1,  -9), S(  13, -16), S(  16, -12), S(  15, -11), S(   1,  -4), S( -15,  -6), 
S(  -3,  21), S(   3,  10), S(   5,  -2), S(  24, -21), S(  23, -16), S(  14,   0), S(  10,   6), S( -10,   8), 
S(  11,  40), S(  22,  35), S(  17,  13), S(   8, -10), S(  42, -23), S(  58,   1), S(  24,  22), S( -12,  29), 
S(  33,  68), S( 105,  49), S(  13,  34), S(  26,  14), S(  52,  23), S(  47,  14), S( -15,  30), S( -71,  76), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
};

int whiteKnightPSQT[64] = {

S( -74, -24), S( -14, -19), S( -46,  -9), S( -23,  -1), S(   8, -15), S( -19, -13), S(  -8, -21), S( -18, -15), 
S( -17, -44), S( -14, -10), S(  -9,   7), S(  10,   2), S(  10,   7), S(  22, -24), S(   1, -25), S(   5, -40), 
S( -25, -13), S( -14,  -2), S(   3,   3), S(  13,  26), S(  16,  19), S(  12,   2), S(  17, -12), S( -15, -18), 
S(  -8,  -8), S( -12,   4), S(  17,  23), S(  11,  33), S(  26,  17), S(  11,  25), S(  41,  -2), S(   8, -15), 
S(  -2, -14), S(  19,   8), S(   8,  29), S(  45,  25), S(  30,  22), S(  46,  19), S(  21,   4), S(  16,  -9), 
S( -53, -20), S(  40,  -5), S(  12,  22), S(  47,  11), S(  69,   3), S(  56,   4), S(  56, -22), S(  23, -46), 
S( -55, -21), S( -30,  -3), S(  66, -26), S(  -5,   8), S( -13,  -5), S(  23, -24), S(  -9, -25), S( -30, -27), 
S(-121, -50), S( -46, -38), S( -29, -10), S( -13, -30), S(  26, -25), S( -66, -27), S( -52, -53), S( -92, -64), 

};

int whiteBishopPSQT[64] = {

S( -29,  -7), S(   5,   0), S(   0,   1), S(  -4,  -1), S(   9,  -5), S(   1,  -4), S( -30,   6), S( -24,   7), 
S(  -3,  -5), S(  19, -11), S(  17,  -8), S(   6,   0), S(  15,   3), S(  26,  -6), S(  39, -17), S(   2, -16), 
S(   2, -10), S(  15,  -3), S(  14,   6), S(   9,   8), S(  11,  17), S(  29,  -3), S(  14,  -1), S(   7,  -8), 
S(  -6,   1), S(   3,   0), S(   3,  12), S(  18,  19), S(  17,   2), S(   4,   5), S(  13, -13), S(   4,  -3), 
S( -30,  10), S(   7,   7), S( -11,  12), S(  35,  11), S(  19,  10), S(   1,  12), S(   1,   1), S( -16,   2), 
S( -33,   6), S(  13,  -5), S(  28,  -4), S(  14,  -4), S(   3,  -5), S(  31,   1), S(  13,  -5), S( -20,  12), 
S( -34,   7), S( -12,  -1), S( -33,  15), S( -31, -17), S(   2,  -8), S(  19,  -5), S(   3,  -5), S( -66, -14), 
S( -22, -20), S( -22, -12), S( -48, -27), S( -42,   2), S( -55,   3), S( -41, -10), S( -49,  -9), S(  -6, -29), 

};

int whiteRookPSQT[64] = {

S(   3,   0), S(   3,   2), S(   3,   6), S(  11,  -2), S(  15,  -3), S(  25,  -9), S( -15,   5), S(   6, -15), 
S( -24,   3), S( -15,   4), S(  -6,   4), S(   1,   1), S(  18,  -9), S(  17,  -6), S(  13, -16), S( -41,   8), 
S( -25,   7), S( -20,   4), S(  -8,  -1), S( -11,  -2), S(  -1,  -6), S(  12,  -7), S(   5,  -1), S(  -9,  -8), 
S( -29,  13), S( -23,   8), S( -11,  10), S( -11,   4), S(   6,  -8), S(  -5,  -3), S(   2,  -4), S(  -6, -11), 
S( -17,  10), S( -13,   2), S(   0,  13), S(  -2,   2), S(   6,  -2), S(  19,   2), S(  -9,   4), S(  -7,   4), 
S(  -7,  16), S(  -5,  18), S(   7,   4), S(  14,   4), S(  -9,   9), S(  17,   5), S(  31,   3), S(   0,   1), 
S(  -9,   6), S( -17,  10), S(  20,   4), S(  11,   2), S(  22, -12), S(  34,  -1), S( -17,   6), S( -10,  -1), 
S( -14,  13), S(  16,  -1), S( -15,  13), S(  20,  -5), S(  24,   2), S( -12,   4), S( -10,  -7), S( -19,  10), 

};

int whiteQueenPSQT[64] = {

S(   8, -34), S(   6, -39), S(   9, -13), S(  15, -26), S(   3,  -8), S(   1, -17), S( -17,  -7), S( -39, -32), 
S( -16, -11), S(  -3, -30), S(  13, -25), S(  12, -19), S(  24, -24), S(  29, -26), S(  -3, -19), S(  31, -39), 
S(  -7,  -9), S(  15, -58), S(  -8,   5), S(   7, -18), S(  -5,   9), S(   9,   5), S(   2,  28), S(  10,  15), 
S(   6, -31), S( -36,  14), S( -13,  10), S( -18,  29), S( -12,  10), S( -12,  16), S(  -4,  25), S(   1,  31), 
S( -29,  10), S( -28,  12), S( -21,  15), S( -31,  43), S( -20,  42), S(  -9,  30), S(  -6,  40), S(  -3,  31), 
S(  -5, -24), S( -26,  -1), S(   4, -11), S( -21,  29), S(  27,  23), S(  56,  19), S(  40,  40), S(  53,  -6), 
S( -31, -14), S( -62,  33), S(   7,  16), S(  10,  29), S( -15,  29), S(  14,  26), S(  34,  14), S(  28, -13), 
S( -15, -19), S(  -3,  17), S(   7,  28), S(  -3,  14), S(  51,  25), S(  16,  13), S(  22,   1), S(  41,  24), 

};

int whiteKingPSQT[64] = {

S( -19, -55), S(  34, -44), S(  17, -20), S( -61,   2), S(   5, -22), S( -33,  -3), S(  28, -32), S(  19, -56), 
S(  -2, -20), S(   2,  -8), S(  -9,  10), S( -67,  23), S( -51,  24), S( -36,  18), S(  12,  -6), S(  22, -26), 
S(  13, -25), S(  15,  -8), S(  -7,  12), S( -27,  21), S( -37,  25), S( -42,  20), S(  -8,   3), S( -15, -11), 
S( -33, -12), S(  40, -14), S(  -2,  20), S( -21,  23), S( -40,  27), S( -17,  15), S( -41,   7), S( -64,  -9), 
S( -12, -10), S(  37,  13), S(  45,  16), S(   2,  24), S(  12,  13), S(  28,  18), S(  44,  11), S(  -7,  -4), 
S(   6,  -7), S(  47,   8), S(  69,   9), S(  22,   9), S(  26,  12), S(  72,  33), S(  60,  27), S(   9,  11), 
S(  31, -31), S(  24,  18), S(   5,  13), S(  55,   6), S(  19,  16), S(  50,  25), S(   5,  12), S( -22,   5), 
S( -59, -71), S( -12, -37), S(   3, -27), S(  -9, -12), S( -22, -15), S(  -5,  15), S(  -5,   7), S( -20, -11), 

};


int blackPawnPSQT[64] = {

S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(  41,  66), S(  23,  62), S(  24,  37), S(  57,  12), S( -16,  29), S(  26,  25), S( -43,  76), S(  -7,  71), 
S(   8,  48), S( -18,  48), S(  33,  23), S(  15, -10), S(  49, -20), S(  68,  -6), S(   4,  29), S( -16,  37), 
S(  -8,  18), S(   6,   9), S(   4,  -1), S(  25, -21), S(  29, -12), S(  26, -11), S(   6,   7), S( -13,   8), 
S( -16,   8), S( -13,   5), S(   1,  -8), S(  16, -16), S(  25, -16), S(  18, -15), S(   0,  -4), S( -16,  -4), 
S( -19,  -2), S( -24,  -1), S(  -9, -10), S(  -8,  -8), S(   3,  -9), S(   6,  -9), S(  17, -16), S(  -9, -12), 
S( -17,   5), S( -15,  -3), S( -25,   6), S( -19,  -8), S( -20,   2), S(  16,  -8), S(  25, -18), S(  -9, -16), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
};

int blackKnightPSQT[64] = {

S(-112, -66), S( -52, -36), S( -36,  -4), S( -36, -23), S(   2, -15), S( -60, -42), S( -30, -45), S( -67, -91), 
S( -91, -11), S( -68,   4), S(  55, -19), S(  24,   6), S(  18,  -3), S(  51, -20), S(   0, -13), S( -33, -55), 
S( -44, -15), S(  34, -18), S(  22,  18), S(  24,  22), S(  52,   0), S(  98,   0), S(  48, -15), S(  23, -26), 
S( -13,  -3), S(  13,   4), S(  -3,  35), S(  41,  26), S(  27,  27), S(  61,  10), S(  13,   6), S(  30, -17), 
S(  -8,  -8), S(  15,  -4), S(   4,  27), S(   9,  31), S(  25,  27), S(  20,  17), S(  -1,  13), S(  -3,  -1), 
S( -31, -11), S(  -9,  13), S(   3,   9), S(   5,  23), S(  24,  13), S(  12,   0), S(  20, -22), S( -18,  -4), 
S( -28,   0), S( -46, -10), S( -12,  -1), S(   7,   2), S(  13,   3), S(   6,   6), S(  -8,   0), S( -21, -16), 
S( -63,  -5), S( -11, -24), S( -36, -11), S( -22,   3), S(   0,  -7), S( -14,   0), S(  -8, -29), S( -24, -45), 

};

int blackBishopPSQT[64] = {

S( -28,  -3), S(  -7, -18), S(-104,   9), S( -69, -15), S(  -7,  -6), S( -47,  -5), S(   1,  -2), S(  -2,  -9), 
S( -42,  -3), S(   6,  -4), S( -38,   1), S( -37,   6), S(  12,   3), S(  20,  -4), S(  -6,  -4), S( -81,   9), 
S( -25,   9), S(  22,  -4), S(  20,   3), S(   4,   1), S(  29,  -4), S(  27,   2), S(  17,   6), S(  -6,  -5), 
S(   2,  -8), S(  -2,   9), S(   1,  14), S(  25,   8), S(  23,  12), S(  29,   2), S(   9,  -7), S(  -9,   4), 
S(  -9, -10), S(   4,   6), S(   2,  11), S(  15,  14), S(  31,   7), S(   3,  11), S( -11,   8), S(   1,  -7), 
S( -11,   3), S(   5,   4), S(  11,  11), S(   4,  13), S(  13,  12), S(  28,  -3), S(  15,   0), S(   5,  -6), 
S(  12,  -8), S(  19, -16), S(   9,  -2), S(   6,   0), S(  13,   0), S(  17,  -6), S(  39, -11), S(   6, -21), 
S( -28,  -8), S(   6,  -2), S(   0,  -4), S(  -7,   3), S(  -2,   1), S(  -4,   5), S( -25,   2), S( -13, -15), 

};

int blackRookPSQT[64] = {

S(  17,  -4), S(   7,   1), S( -20,  10), S(   6,   6), S(   6,   1), S( -20,   7), S(   2,  11), S(   4,  -6), 
S(  -9,   5), S(  -1,   4), S(  16,  -2), S(  24,  -5), S(  33, -14), S(  31, -10), S( -22,   8), S(  12,   0), 
S( -28,  14), S(   6,  10), S(  -4,  17), S(  -4,  13), S( -21,   7), S(  14,   2), S(  57,  -5), S(  -1,   4), 
S( -29,  12), S( -21,  15), S( -11,  18), S(   7,   5), S(  -9,  11), S(  27,   3), S( -11,   1), S( -31,  15), 
S( -34,  11), S( -21,  14), S( -22,  15), S( -14,   8), S(  -8,   4), S(  -9,   0), S(  11,  -6), S( -37,   9), 
S( -31,   6), S( -10,   8), S( -14,  -1), S( -13,   2), S(   3,  -7), S(  10, -12), S(   3,  -8), S( -17,  -9), 
S( -22,   5), S(   5,  -6), S( -25,   7), S(  -1,   2), S(   5,  -9), S(  22, -16), S(  -8,  -4), S( -50,  10), 
S(  -1,   3), S(   0,   4), S(   4,   7), S(  12,   0), S(  23, -12), S(  22,  -5), S( -13,   0), S(   1, -15), 

};

int blackQueenPSQT[64] = {

S( -19, -24), S(   1,  15), S(   4,   7), S(   6,  20), S(  36,  11), S(  43,  32), S(  28,   8), S(  52,  15), 
S( -27,   0), S( -52,   1), S( -21,  18), S(  -4,  28), S( -12,  43), S(  52,  15), S(  21,  25), S(  43,  36), 
S( -18,  -3), S(  -6,  -1), S(   0, -10), S(  -7,  39), S(   7,  32), S(  48,  23), S(  28,   5), S(  31,  40), 
S( -34,  16), S( -27,  20), S( -33,   2), S( -26,   8), S(  -6,  24), S(   1,  13), S(  -5,  64), S(  -4,  38), 
S(   7, -32), S( -36,  36), S(  -8,  -5), S( -17,  27), S(  -9,  14), S(   4,  10), S( -11,  34), S(  -1,  11), 
S( -14,   3), S(  -2, -21), S(  -2,  -1), S(  -2,  -8), S(   5, -13), S(   1,   8), S(  18,   1), S(  11,  16), 
S( -26,   3), S( -10,  -8), S(   7, -23), S(  11, -23), S(  17, -21), S(  16, -23), S(   2, -37), S( -10,  10), 
S(  -7, -11), S(  -4, -29), S(   2, -25), S(  16, -20), S(   0,   5), S( -23, -13), S( -13, -13), S( -47, -34), 

};

int blackKingPSQT[64] = {

S( -48, -54), S(  11, -28), S(  17,  -6), S(  25, -26), S(  -1, -17), S(   2,  -2), S(  31, -11), S(   6, -17), 
S(  19,   0), S(  33,  -4), S(  31,   4), S(  45,   6), S(  28,   5), S(  18,  25), S(   8,  14), S( -16,   6), 
S(  59,   5), S(  43,   6), S(  55,  10), S(  28,   8), S(  47,   3), S(  75,  25), S(  97,  23), S(  -6,  -3), 
S(  26, -22), S(   5,   6), S(  28,  12), S(  14,  22), S(  17,  16), S(  -8,  25), S(  10,   9), S( -55,   2), 
S( -44, -26), S(  26, -10), S(  -6,  16), S( -47,  29), S( -39,  26), S( -24,  15), S(  -7,  -5), S( -38, -18), 
S( -12, -18), S(  -4,  -4), S( -13,  13), S( -24,  23), S( -26,  25), S( -25,  18), S(   7,  -1), S( -28, -11), 
S(  20, -42), S(  24, -16), S( -26,  15), S( -56,  23), S( -47,  25), S( -33,  15), S(   6,  -3), S(   9, -20), 
S( -27, -54), S(  35, -38), S(   7, -19), S( -67,   3), S(   6, -21), S( -38,   1), S(  27, -28), S(  25, -57), 

};




#endif

