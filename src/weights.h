#ifndef WEIGHTS 
#define WEIGHTS

#include "functions.h"



constexpr int

weight_val_pawn = S(70, 109),
weight_val_knight = S(286, 302),
weight_val_bishop = S(320, 351),
weight_val_rook = S(403, 623),
weight_val_queen = S(911, 1156), 

weight_isolated_pawn = S(-9, -8),
weight_backward_pawn = S(-9, -6),
weight_double_pawn = S(-8, -20),
weight_pawn_hole = S(-8, 0), 
arr_weight_pawn_chain[8] = { S(0, 0), S(0, 0), S(8, 13), S(11, 7), S(14, 30), S(50, -1), S(0, 0), S(0, 0), }, 
arr_weight_phalanx_pawn[8] = { S(0, 0), S(1, -4), S(-5, 0), S(10, 7), S(23, 27), S(76, 96), S(49, 158), S(0, 0), }, 
arr_weight_defended_phalanx_pawn[8] = { S(0, 0), S(0, 0), S(8, 8), S(9, 11), S(22, 31), S(88, 66), S(19, 38), S(0, 0), }, 
arr_weight_passed_pawn[8] = { S(0, 0), S(-12, 8), S(-22, 15), S(-16, 36), S(-1, 56), S(-1, 110), S(31, 124), S(0, 0), }, 
arr_weight_defended_passed_pawn[8] = { S(0, 0), S(0, 0), S(-8, 18), S(-4, 41), S(22, 71), S(64, 121), S(181, 148), S(0, 0), }, 

weight_knight_all_pawns_count = S(2, 6), 
weight_knight_outpost = S(13, 0), 
weight_undefended_knight = S(-12, 1), 
weight_knight_defended_by_pawn = S(-10, 8), 

weight_bishop_pair = S(17, 68),weight_undefended_bishop = S(-8, -2),

weight_rook_behind_stm_passed_pawn = S(15, -6), 
weight_rook_behind_opp_passed_pawn = S(-15, 11), 
weight_rook_flank_outpost = S(6, 4), 
weight_rook_half_open_file = S(17, 10), 
weight_rook_open_file = S(34, 6), 
weight_rook_enemy_queen_same_file = S(13, -8), 
weight_rook_on_seventh_rank = S(-1, 16), 
weight_rook_on_eight_rank = S(10, 22), 
weight_rook_supporting_friendly_rook = S(8, 21), 

weight_queen_underdeveloped_pieces = S(-5, -14), 

weight_king_pawn_shield = S(22, -2), 
weight_king_enemy_pawn_storm = S(-23, 23), 


arr_weight_knight_mobility[16] = { 

S(-38, -66), S(-19, -30), S(-9, -12), S(-4, -3), S(1, 6), S(6, 11), S(13, 12), S(15, 11), 
S(19, 11), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 

}, 
arr_weight_bishop_mobility[16] = { 

S(-24, -32), S(-18, -29), S(-10, -14), S(-5, -4), S(2, 5), S(8, 16), S(12, 19), S(14, 22), 
S(15, 25), S(19, 24), S(21, 19), S(25, 19), S(38, 22), S(37, 10), S(0, 0), S(0, 0), 

}, 
arr_weight_rook_mobility[16] = { 

S(-20, -30), S(-11, -8), S(-8, -5), S(-5, -3), S(-8, 3), S(-4, 6), S(-2, 8), S(0, 12), 
S(2, 14), S(2, 17), S(2, 20), S(-1, 24), S(0, 28), S(2, 25), S(-2, 28), S(0, 0), 

}, 
arr_weight_queen_mobility[32] = { 

S(-5, -43), S(-1, -104), S(-9, -72), S(-7, -46), S(-7, -32), S(-3, -27), S(-3, -13), S(-2, 4), 
S(0, 9), S(-1, 15), S(1, 19), S(2, 23), S(1, 27), S(2, 30), S(1, 34), S(0, 39), 
S(0, 40), S(4, 40), S(4, 39), S(11, 30), S(13, 27), S(22, 25), S(35, 4), S(33, 1), 
S(45, -11), S(49, -15), S(1, -15), S(17, -3), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 

}, 

weight_knight_attack = S(13, 150), 
weight_bishop_attack = S(1, 154), 
weight_rook_attack = S(-2, 105), 
weight_queen_attack = S(7, -78), 
weight_safe_knight_check = S(142, -18), 
weight_safe_bishop_check = S(79, 209), 
weight_safe_rook_check = S(126, -52), 
weight_safe_queen_check = S(67, 38), 
weight_unsafe_knight_check = S(32, -92), 
weight_unsafe_bishop_check = S(51, 108), 
weight_unsafe_rook_check = S(75, -230), 
weight_unsafe_queen_check = S(33, -31), 
weight_safety_adjustment = S(64, 19), 


pawnPSQT[U8_MAX_SQUARES] = {

S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S( -16,   7), S( -26,   8), S( -24,   1), S( -28,  -3), S( -23,   7), S( -13,   2), S(   3,  -4), S( -16, -11), 
S( -14,   2), S( -14,  -2), S(  -9,  -7), S(  -3,  -9), S(   1,  -6), S( -12,  -5), S(   2, -10), S(  -9, -12), 
S( -17,   6), S( -11,   3), S(  -2, -11), S(   8, -17), S(  14, -20), S(  12, -14), S(   2, -10), S(  -8, -12), 
S( -11,  27), S(  -1,  13), S(   3,  -3), S(  15, -24), S(  31, -23), S(  27, -15), S(  10,   2), S(   2,   2), 
S(  10,  51), S(  12,  50), S(  41,   8), S(  40, -26), S(  55, -31), S(  73,  -7), S(  46,  30), S(   7,  36), 
S(  39,  84), S(  64,  64), S(  45,  66), S(  77,  13), S(  52,  16), S(  32,  30), S( -51,  70), S( -83,  94), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
},

knightPSQT[U8_MAX_SQUARES] = {

S( -67,  -8), S( -28, -15), S( -41,  -6), S( -23,  -6), S( -18,  -4), S( -13, -16), S( -26,  -8), S( -48,   0), 
S( -39,  -6), S( -26,  -1), S( -19,   0), S(  -5,  -5), S(  -2,  -4), S( -14,  -3), S( -14,  -9), S( -15,   1), 
S( -30, -10), S(  -8,  -5), S( -10,  -4), S(  -3,  16), S(   6,  13), S(  -3, -11), S(   7, -15), S( -12,  -7), 
S( -11,   7), S(  -2,   7), S(   3,  20), S(   8,  20), S(   5,  27), S(   7,  12), S(   3,  10), S(   2,  -1), 
S(   3,   9), S(   6,  13), S(  19,  22), S(  26,  25), S(  26,  20), S(  31,  21), S(  25,  15), S(  28,   3), 
S(  -8,  -7), S(  24,  -1), S(  27,  15), S(  44,  12), S(  82,  -2), S(  77,  -7), S(  43,  -4), S(  19,  -9), 
S( -21, -10), S(  -4,   0), S(  20,   0), S(  32,   2), S(  17,  -5), S(  76, -19), S(   1,   0), S(  13, -22), 
S(-139, -52), S( -84, -17), S( -61,   0), S( -17,  -6), S(  11,   0), S( -43, -19), S( -57, -10), S( -95, -68), 
},

bishopPSQT[U8_MAX_SQUARES] = {

S(  -6, -10), S(  10,   2), S(  -5,   0), S( -13,   0), S(  -5,  -3), S(  -8,   4), S(   4, -14), S(   5, -27), 
S(  -2,   6), S(   9,  -1), S(   9,  -6), S(  -6,   5), S(   4,   1), S(   6,  -4), S(  20,  -2), S(   5, -12), 
S(  -4,   5), S(   0,  12), S(   4,  14), S(  -4,  13), S(   2,  16), S(   3,  10), S(   4,   1), S(   9,  -7), 
S( -11,   1), S(  -9,  11), S(  -9,  18), S(  18,  16), S(   7,  16), S(  -3,  12), S( -12,   8), S(   6, -10), 
S( -13,   6), S(  -1,  11), S(  12,   9), S(  20,  21), S(  23,  14), S(   5,  15), S(   4,  10), S( -18,   7), 
S(  -7,   6), S(  11,   5), S(  10,   7), S(  27,  -2), S(  16,   1), S(  54,   8), S(  19,   3), S(  23,   6), 
S( -21, -10), S(   1,  -3), S(  -6,   2), S( -22,   4), S(  14,  -6), S(   0,  -3), S(   8,   3), S( -12, -10), 
S( -23,  -2), S( -44,  10), S( -48,   3), S( -77,  16), S( -57,   9), S( -54,   1), S( -15,  -4), S( -47,  -5), 
},

rookPSQT[U8_MAX_SQUARES] = {

S(  -5,   6), S(  -7,   3), S(  -7,  10), S(  -1,   4), S(   6,  -5), S(   9,  -2), S(   9,  -8), S(   1,  -8), 
S( -24,   3), S( -22,   7), S( -14,   7), S( -13,   6), S(  -6,  -3), S(  -1,  -7), S(  11, -16), S( -12, -10), 
S( -27,  10), S( -28,   7), S( -22,   8), S( -20,   9), S( -12,   4), S(   0,  -5), S(  13, -18), S(   2, -17), 
S( -28,  18), S( -34,  20), S( -23,  17), S( -20,  18), S( -16,  13), S( -20,  11), S(  -4,   4), S( -11,   1), 
S( -21,  27), S( -13,  21), S( -13,  27), S(  -9,  21), S(  -6,  10), S(   8,   5), S(   4,   9), S(   5,   6), 
S( -20,  26), S(   4,  23), S(  -1,  25), S(  -4,  21), S(  22,  12), S(  23,   7), S(  64,   2), S(  20,   7), 
S( -14,   6), S( -18,  16), S(   0,  16), S(  16,   5), S(  -2,   8), S(  20,   0), S(  14,  -2), S(  36, -10), 
S(   3,   6), S(  -5,  10), S(  -6,  14), S(  -9,  13), S(   6,   5), S(  19,   2), S(  21,   1), S(  32,   0), 
},

queenPSQT[U8_MAX_SQUARES] = {

S(  -5, -17), S(  -5, -20), S(   1, -20), S(   8,  -6), S(   9, -29), S(  -1, -32), S(   2, -34), S(  -7, -27), 
S(   1, -24), S(   0, -14), S(   6, -16), S(  11, -11), S(  11,  -9), S(  19, -35), S(  19, -54), S(  28, -62), 
S(   0, -21), S(   0,   1), S(  -2,  17), S(  -3,  13), S(   1,  17), S(  13,   3), S(  19,  -8), S(  14, -13), 
S(   2, -11), S( -15,  25), S( -12,  25), S(  -7,  36), S(  -5,  30), S(   1,  16), S(   3,  16), S(  12,   8), 
S( -14,   5), S(  -8,   9), S( -11,  23), S( -14,  38), S( -13,  41), S(  -2,  22), S(   3,  31), S(   4,  20), 
S(  -7,  -8), S( -13,   4), S( -15,  29), S( -13,  37), S(  -9,  52), S(   6,  32), S(  21,   9), S(  13,  18), 
S( -17,   0), S( -34,  16), S( -31,  45), S( -46,  68), S( -51,  88), S( -25,  57), S( -27,  33), S(  23,  32), 
S( -35,  22), S( -26,  14), S( -19,  37), S(   6,  41), S(  -6,  47), S(   1,  38), S(  23,   2), S(  -8,  28), 
},

kingPSQT[U8_MAX_SQUARES] = {

S(  19, -72), S(  43, -51), S(  31, -29), S( -40, -16), S(   8, -31), S( -23, -17), S(  30, -42), S(  24, -72), 
S(  36, -44), S(   5, -13), S(  -2,  -1), S( -29,   8), S( -31,  11), S( -17,   3), S(  14, -13), S(  14, -32), 
S( -27, -28), S(  -9,  -3), S( -42,  17), S( -50,  28), S( -42,  28), S( -48,  19), S( -28,   4), S( -59,  -7), 
S( -38, -23), S( -26,   6), S( -53,  30), S( -86,  48), S( -84,  47), S( -56,  34), S( -73,  23), S(-102,   5), 
S( -27, -15), S( -18,  18), S( -39,  39), S( -60,  49), S( -67,  51), S( -44,  46), S( -38,  35), S( -83,  10), 
S( -39,  -6), S(  37,  17), S(  -6,  33), S( -13,  41), S(  17,  43), S(  64,  39), S(  27,  39), S(   3,   7), 
S( -43, -20), S(   3,  14), S( -13,  18), S(  49,  14), S(  22,  24), S(  25,  35), S(  18,  33), S( -15,   1), 
S( -23, -87), S(  -2, -48), S(  14, -35), S( -18, -10), S(   0, -19), S(  -5,  -7), S(   0, -10), S(  -9, -90), 
};






#endif
