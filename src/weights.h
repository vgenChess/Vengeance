#ifndef weights_h
#define weights_h 

#include "evaluate.h"
#include "functions.h" 

int 

weight_pawn = S(86, 93),
weight_knight = S(367, 284),
weight_bishop = S(344, 293),
weight_rook = S(472, 533),
weight_queen = S(1035, 1008), 


weight_isolated_pawn = S(-12, -4),
weight_backward_pawn = S(-6, -7),
weight_double_pawn = S(-6, -18),
weight_defended_pawn = S(9, 6),
weight_pawn_hole = S(-8, 2), 
arr_weight_passed_pawn[8] = { S(0, 0), S(1, 4), S(-3, 8), S(-12, 32), S(4, 56), S(16, 110), S(53, 143), S(0, 0), }, 
arr_weight_defended_passed_pawn[8] = { S(0, 0), S(0, 0), S(0, 12), S(-2, 32), S(9, 64), S(80, 114), S(129, 107), S(0, 0), }, 

weight_undefended_knight = S(-10, 1), 
weight_knight_defended_by_pawn = S(3, 17), 

weight_bad_bishop = S(56, 57), 
weight_bishop_pair = S(27, 10), 

weight_rook_half_open_file = S(17, 13), 
weight_rook_open_file = S(51, -3), 
weight_rook_enemy_queen_same_file = S(13, 15), 
weight_rook_on_seventh_rank = S(4, 13), 
weight_rook_on_eight_rank = S(13, 10), 
weight_rook_supporting_friendly_rook = S(0, 13), 

weight_queen_underdeveloped_pieces = S(-5, -13), 

weight_king_pawn_shield = S(15, -1), 
weight_king_enemy_pawn_storm = S(-40, 26), 

arr_weight_knight_mobility[16] = { 

S(-33, -87), S(-15, -47), S(-3, -28), S(2, -15), S(16, -7), S(20, 8), S(27, 8), S(30, 13), 
S(52, -4), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 

}, 
arr_weight_bishop_mobility[16] = { 

S(-17, -52), S(-11, -42), S(-3, -23), S(1, -13), S(6, -3), S(9, 0), S(14, 3), S(14, 7), 
S(18, 9), S(21, 5), S(17, 7), S(25, 4), S(10, 9), S(20, 11), S(0, 0), S(0, 0), 

}, 
arr_weight_rook_mobility[16] = { 

S(-25, -67), S(-13, -34), S(-11, -15), S(-7, -8), S(-6, -1), S(0, 2), S(3, 5), S(6, 9), 
S(12, 7), S(17, 9), S(20, 10), S(21, 12), S(32, 16), S(45, 6), S(23, 16), S(0, 0), 

}, 
arr_weight_queen_mobility[32] = { 

S(0, -22), S(-6, -33), S(-6, -59), S(-8, -80), S(-5, -66), S(-4, -40), S(-4, -43), S(-6, -31), 
S(-2, -25), S(0, -13), S(1, -11), S(-1, -1), S(3, 11), S(6, 10), S(7, 15), S(12, 19), 
S(10, 23), S(16, 28), S(21, 30), S(32, 28), S(29, 32), S(36, 38), S(38, 45), S(49, 40), 
S(53, 37), S(54, 47), S(34, 32), S(46, 44), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 

}, 

weight_center_control = S(4, 0), 

weight_knight_attack = S(44, -14), 
weight_bishop_attack = S(57, 12), 
weight_rook_attack = S(49, 12), 
weight_queen_attack = S(80, 12), 
weight_rook_safe_contact_check = S(76, 26), 
weight_queen_safe_contact_check = S(145, 114), 
weight_knight_check = S(84, -26), 
weight_bishop_check = S(95, 62), 
weight_rook_check = S(68, -8), 
weight_queen_check = S(74, 5), 
weight_safety_adjustment = S(29, -25);


int pawnPSQT[64] = {

S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S( -14,   2), S( -18,  -3), S( -24,   2), S( -21,  -6), S( -22,   5), S(  14,  -9), S(  22, -17), S(  -7, -19), 
S( -16,  -5), S( -24,  -2), S(  -9, -11), S( -11,  -8), S(  -1,  -8), S(   4, -10), S(  17, -17), S(  -6, -16), 
S( -16,   7), S( -15,   3), S(   1, -10), S(  17, -19), S(  22, -16), S(  16, -14), S(   1,  -6), S( -15,  -7), 
S(  -7,  18), S(   2,   8), S(   6,  -4), S(  25, -23), S(  28, -17), S(  22,  -8), S(   8,   5), S( -11,   5), 
S(   5,  44), S(   0,  42), S(  22,  19), S(   9,  -9), S(  43, -20), S(  62,  -2), S(  11,  26), S( -17,  33), 
S(  43,  79), S(  70,  68), S(  23,  49), S(  47,  24), S(  28,  38), S(  43,  32), S( -24,  65), S( -36,  87), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
};

int knightPSQT[64] = {

S( -17,  -5), S(  -6,   5), S( -11,  -4), S( -15,   5), S(   1,  -2), S(  -7,   2), S(   2,   1), S(  12,  -5), 
S(  -5, -20), S(   9,  -5), S( -12,   3), S(   7,  -1), S(   9,   1), S(  10,  -8), S(  -4,   1), S(  -2,  -1), 
S( -23,   0), S( -20,  -2), S(  -4,  -7), S(   8,   5), S(   8,   2), S(   5,  -4), S(  11,  -7), S( -13,   0), 
S(  -7,  -3), S( -14,  -2), S(   9,   1), S(  10,  11), S(  20,   0), S(   7,   3), S(  32,  -9), S(  10,  -6), 
S(  -2,  -8), S(   8,  -3), S(   0,   6), S(  33,   6), S(  16,   6), S(  24,   3), S(   5,  -6), S(   4,  -1), 
S( -42,  -7), S(  25,  -9), S(   0,   4), S(  28,  -1), S(  48,  -9), S(  35, -10), S(  40, -18), S(   4, -26), 
S( -41,  -5), S( -21,  -4), S(  43, -22), S(  -6,  -1), S( -16, -10), S(   3, -19), S(  -9,  -9), S( -29,  -5), 
S( -93, -29), S( -22, -22), S( -15,  -5), S(  -2, -25), S(  10, -15), S( -49, -19), S( -13, -30), S( -64, -35), 

};

int bishopPSQT[64] = {

S( -29,  -7), S(   6,  -1), S(  -1,  -2), S(  -8,   1), S(   2,  -3), S(  -1,  -1), S( -25,   4), S( -21,  -4), 
S(   3,  -7), S(  17, -14), S(  11,  -6), S(   5,  -2), S(  13,  -1), S(  20,  -7), S(  38, -16), S(   3, -20), 
S(  -5,  -5), S(   7,   1), S(  11,   8), S(   6,   8), S(  10,  13), S(  26,  -2), S(  14,  -1), S(   6,  -7), 
S(  -8,  -5), S(   1,   2), S(   2,  10), S(  16,  14), S(  22,   3), S(   3,   6), S(  -2,  -4), S(   3,  -6), 
S( -15,   0), S(   2,   6), S(  -6,  12), S(  28,   8), S(  19,  10), S(  13,   6), S(   4,  -6), S( -15,   3), 
S( -31,   6), S(  15,  -5), S(  23,  -2), S(   8,  -2), S(  13,  -5), S(  27,   1), S(  11,   1), S( -14,   2), 
S( -38,   1), S(  -6,  -2), S( -37,   8), S( -40,  -6), S(   5,  -3), S(  17,  -5), S(  -3,  -3), S( -73,  -4), 
S( -26, -12), S( -20, -14), S( -79,  -9), S( -56,  -7), S( -32,  -3), S( -46,  -8), S( -23,  -6), S(  -3, -19), 

};

int rookPSQT[64] = {

S(   1,   1), S(   3,   2), S(   3,   6), S(  11,  -1), S(  19,  -8), S(  24,  -8), S( -12,   1), S(   5, -16), 
S( -23,   3), S(  -5,  -2), S( -15,   5), S(  -1,   2), S(  10,  -9), S(  20, -12), S(   3, -11), S( -45,   7), 
S( -28,   5), S( -14,   5), S(  -9,  -2), S( -12,   0), S(   0,  -5), S(  11, -10), S(   4,  -4), S( -12,  -9), 
S( -32,  12), S( -22,  11), S( -16,  12), S( -13,   6), S(  -1,  -2), S(  -8,  -1), S(   6,  -6), S( -21,  -1), 
S( -23,  11), S( -17,   9), S(  -5,  16), S(   2,   4), S(  -3,   5), S(  20,   4), S(  -9,   2), S( -19,  10), 
S( -17,  14), S(   0,  14), S(   1,  11), S(   3,   9), S( -16,   9), S(  15,   3), S(  43,  -2), S(  -3,   3), 
S( -10,   7), S(  -8,   8), S(  17,   2), S(  17,   1), S(  25, -11), S(  31,  -4), S( -21,   8), S(  -2,   2), 
S(   2,   6), S(  12,   1), S( -17,  12), S(  13,   3), S(  15,   3), S( -14,   6), S(  -5,   3), S(  -7,   3), 

};

int queenPSQT[64] = {

S(   1, -20), S(   5, -34), S(   6, -17), S(  17, -22), S(   4,  -1), S(  -9, -15), S( -13, -12), S( -43, -36), 
S( -19,  -6), S(  -5, -19), S(  11, -23), S(  13, -18), S(  21, -19), S(  23, -24), S(   0, -28), S(  11, -16), 
S(  -8,  -6), S(   8, -39), S(  -3,   3), S(   4, -12), S(  -1,   2), S(   8,   7), S(  10,  16), S(  11,  15), 
S(   8, -31), S( -35,  26), S( -10,   5), S( -16,  30), S( -10,  14), S(  -3,  14), S(  -7,  31), S(   2,  20), 
S( -28,  13), S( -26,  17), S( -26,  10), S( -28,  28), S( -12,  36), S(  -4,  22), S(  -5,  53), S(  -3,  35), 
S( -10, -14), S( -13,  -2), S(   1,  -8), S( -14,  37), S(  15,  32), S(  52,  22), S(  36,  23), S(  42,  16), 
S( -27,  -7), S( -54,  16), S(  -8,  18), S(   6,  29), S( -13,  38), S(  30,  22), S(  25,  21), S(  34,  13), 
S( -15, -20), S(  -1,  18), S(   6,  19), S(   2,  18), S(  45,  18), S(  30,  21), S(  24,   6), S(  45,  22), 

};

int kingPSQT[64] = {

S( -14, -52), S(  39, -45), S(  20, -19), S( -52,  -3), S(   8, -23), S( -30,  -5), S(  30, -33), S(  17, -55), 
S(  14, -23), S(  11, -12), S( -11,   9), S( -62,  21), S( -50,  22), S( -35,  18), S(  13,  -8), S(  20, -25), 
S(   5, -22), S(  14,  -6), S(  -7,  15), S( -30,  19), S( -33,  23), S( -32,  20), S(  -2,   2), S( -14, -12), 
S( -35, -19), S(  37, -12), S(  -7,  17), S( -36,  21), S( -47,  26), S( -23,  13), S( -31,   2), S( -53, -13), 
S(   9, -15), S(  22,   9), S(  32,  11), S(  -4,  20), S(   7,  12), S(   1,  18), S(  27,  11), S( -32,  -3), 
S(  42,   3), S(  44,   7), S(  62,   7), S(  20,   8), S(  30,   8), S(  72,  29), S(  76,  28), S(   6,  13), 
S(  35, -14), S(  38,   8), S(  21,  13), S(  52,   6), S(  31,  14), S(  38,  31), S(   9,  15), S( -17,   9), 
S( -40, -49), S(   9, -27), S(  22, -18), S(  19, -14), S( -16, -11), S(   6,  16), S(  24,   9), S(   3,  -1), 

};


#endif

