#ifndef WEIGHTS 
#define WEIGHTS

#include "functions.h"




constexpr int

weight_val_pawn = S(93, 85),
weight_val_knight = S(374, 218),
weight_val_bishop = S(431, 254),
weight_val_rook = S(590, 458),
weight_val_queen = S(1259, 844), 

weight_isolated_pawn = S(-14, -1),
weight_backward_pawn = S(-9, -8),
weight_double_pawn = S(-5, -18),
weight_pawn_hole = S(-8, 0), 
arr_weight_pawn_chain[8] = { S(0, 0), S(0, 0), S(6, 11), S(23, 6), S(25, 30), S(73, 22), S(0, 0), S(0, 0), }, 
arr_weight_phalanx_pawn[8] = { S(0, 0), S(3, -5), S(-4, -3), S(8, 3), S(15, 15), S(94, 26), S(32, 163), S(0, 0), }, 
arr_weight_defended_phalanx_pawn[8] = { S(0, 0), S(0, 0), S(5, 5), S(15, 10), S(32, 41), S(25, 2), S(24, 31), S(0, 0), }, 
arr_weight_passed_pawn[8] = { S(0, 0), S(-11, 2), S(-18, 7), S(-19, 24), S(-8, 47), S(-5, 109), S(12, 125), S(0, 0), }, 
arr_weight_defended_passed_pawn[8] = { S(0, 0), S(0, 0), S(-2, 16), S(-6, 33), S(29, 60), S(97, 102), S(270, 46), S(0, 0), }, 

weight_knight_all_pawns_count = S(3, 6), 
weight_knight_outpost = S(11, 4), 
weight_undefended_knight = S(-13, 1), 
weight_knight_defended_by_pawn = S(-7, 2), 

weight_bishop_pair = S(32, 54),weight_undefended_bishop = S(-5, 0),

weight_rook_behind_stm_passed_pawn = S(18, -7), 
weight_rook_behind_opp_passed_pawn = S(-19, 19), 
weight_rook_flank_outpost = S(-7, 4), 
weight_rook_half_open_file = S(19, 4), 
weight_rook_open_file = S(41, -9), 
weight_rook_enemy_queen_same_file = S(12, -12), 
weight_rook_on_seventh_rank = S(0, 9), 
weight_rook_on_eight_rank = S(16, 7), 
weight_rook_supporting_friendly_rook = S(39, -1), 

weight_queen_underdeveloped_pieces = S(-6, 3), 

arr_weight_knight_mobility[16] = { 

S(-38, -64), S(-7, -46), S(2, -27), S(8, -22), S(16, -19), S(22, -14), S(27, -13), S(29, -10), 
S(41, -22), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 

}, 
arr_weight_bishop_mobility[16] = { 

S(-10, -36), S(-5, -30), S(5, -25), S(9, -17), S(15, -12), S(20, -4), S(23, -2), S(25, 1), 
S(26, 4), S(36, -1), S(41, -4), S(47, -8), S(62, 4), S(49, -8), S(0, 0), S(0, 0), 

}, 
arr_weight_rook_mobility[16] = { 

S(-16, -38), S(-5, -19), S(-2, -16), S(0, -14), S(-1, -9), S(7, -10), S(10, -6), S(8, -1), 
S(15, -2), S(21, -2), S(18, 2), S(18, 7), S(26, 14), S(35, 6), S(30, 11), S(0, 0), 

}, 
arr_weight_queen_mobility[32] = { 

S(-11, 22), S(-6, -82), S(-5, -73), S(-5, -67), S(-2, -59), S(-1, -33), S(2, -39), S(0, -17), 
S(2, -10), S(8, -1), S(8, 5), S(9, -1), S(9, 6), S(10, 13), S(13, 7), S(13, 15), 
S(1, 25), S(17, 17), S(18, 15), S(8, 19), S(9, 22), S(9, 24), S(30, -9), S(57, -24), 
S(62, -32), S(44, -19), S(48, -18), S(5, -15), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 

}, 

weight_pawn_shield[8][8] = { 

S(  62,-281), S(  11, 249), S(   9, -33), S(  31,  47), S(  14,  51), S(  10,   6), S( -55, -25), S(   0,   0), 
S(  61,-326), S( -21, 198), S(   1,  10), S(  43, 102), S(  33, -15), S(  60,   2), S(  11, -12), S(   0,   0), 
S(  36, -22), S(   0,  17), S(  22,-106), S(  12, 167), S(  27, 132), S(  25, 110), S(   3,  69), S(   0,   0), 
S(  17,   8), S(  -9,  34), S( -22, -57), S( -16, 119), S(  11, -33), S(  15,  54), S(  54,   5), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
}, 
weight_blocked_pawn_storm[8][8] = { 

S(   0,   0), S(   0,   0), S(  34,  92), S( -11,  87), S(   7, 108), S(  21,  70), S(   0,  23), S(   0,   0), 
S(   0,   0), S(   0,   0), S( 129,   1), S(   2,  90), S(  16,  28), S(  37, -17), S(  16,  29), S(   0,   0), 
S(   0,   0), S(   0,   0), S(  87,  32), S(  40,   1), S(  27,  25), S(  24,  70), S(  50,  94), S(   0,   0), 
S(   0,   0), S(   0,   0), S(  52,  23), S(   0,  73), S( -52, 181), S( -12,  38), S( -47,  12), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
}, 
weight_unblocked_pawn_storm[8][8] = { 

S(  16,  81), S(-111, -31), S( -73, -31), S(  22,  46), S(  38,  11), S(  28,  -2), S(  17, -47), S(   0,   0), 
S(   8,  82), S(-103, -50), S( -37,   5), S(   7,  33), S(  20, -37), S(   5,  61), S(  20, -75), S(   0,   0), 
S(  12,-100), S(  14, -64), S(  48, -39), S(   6,-130), S(   4, -50), S(  -1, 217), S(   3,  86), S(   0,   0), 
S(  14,-165), S( -89, -49), S(   7,-114), S(  12,  15), S(  -5,  79), S( -24,  99), S(   2, 103), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
}, 
weight_knight_attack = S(21, 3), 
weight_bishop_attack = S(9, 106), 
weight_rook_attack = S(15, 12), 
weight_queen_attack = S(24, -152), 
weight_safe_knight_check = S(114, 73), 
weight_safe_bishop_check = S(44, 270), 
weight_safe_rook_check = S(63, 112), 
weight_safe_queen_check = S(36, 127), 
weight_unsafe_knight_check = S(15, -50), 
weight_unsafe_bishop_check = S(27, 123), 
weight_unsafe_rook_check = S(33, -78), 
weight_unsafe_queen_check = S(19, 10), 
weight_safety_adjustment = S(40, -44), 


pawnPSQT[U8_MAX_SQUARES] = {

S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S( -12,   9), S( -16,   5), S( -16,   4), S( -10,  -5), S( -10,   0), S(  14,  -3), S(  12,  -6), S(  -6, -10), 
S( -10,   0), S( -14,  -3), S(   3,  -9), S(   5, -11), S(  14,  -9), S(   7,  -9), S(  15, -13), S( -13, -10), 
S( -18,   7), S( -18,   4), S(   2, -12), S(  13, -17), S(  14, -18), S(  11, -14), S(  -9,  -7), S( -42,  -7), 
S(  -5,  20), S(  -4,  11), S(  -5,  -3), S(  16, -21), S(  23, -20), S(  17, -15), S(  -2,   0), S( -22,   2), 
S(  -7,  38), S(  -7,  27), S(  23,   8), S(   4, -21), S(  37, -31), S(  57, -20), S(  16,   0), S( -11,  13), 
S(  35,  69), S(  13,  67), S(   2,  57), S(  35,  19), S(  59,   7), S(  28,  24), S(  13,  58), S( -46,  58), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
},

knightPSQT[U8_MAX_SQUARES] = {

S( -44, -31), S(  -6, -16), S( -35, -10), S( -13,  -8), S(  -5, -20), S( -12,  -7), S(  -8, -26), S( -58,  -8), 
S( -11, -19), S( -22, -12), S(   0, -17), S(  10, -15), S(  16, -20), S(  -1, -10), S(   7, -20), S(  -3, -25), 
S( -15, -14), S(   2,  -8), S(   7, -18), S(   6,   6), S(  13,   4), S(   7, -21), S(  21, -22), S( -17, -22), 
S(   6,  -9), S(   3,   2), S(  12,  10), S(   9,  12), S(   8,  15), S(  16,  -3), S( -10,  -1), S(  -3,  -7), 
S(  20,  -9), S(  19,   5), S(   6,  14), S(  33,  16), S(  22,   9), S(  16,  16), S(  19,   4), S(  28,  -8), 
S( -15, -23), S(  12, -11), S(   9,  12), S(  53,   4), S(  79, -18), S( 111, -14), S(  49, -21), S( -12,  -8), 
S( -72, -14), S( -36,  -6), S(  73, -28), S(  13,  -6), S(  83, -30), S(  61, -27), S(   2, -16), S( -11, -28), 
S(-234,   2), S( -48, -39), S( -66, -12), S( -45,  -6), S(  14, -21), S(-117, -11), S( -94, -16), S(-116, -60), 
},

bishopPSQT[U8_MAX_SQUARES] = {

S(  16, -24), S(   2,  -9), S(  13,  -8), S(   9,  -2), S(   2,  -5), S(  -6,  -2), S(   8, -26), S(  15, -22), 
S(  -9,  -3), S(  38, -15), S(  14, -10), S(  11,  -1), S(  16,  -2), S(  23, -10), S(  49, -19), S(  12, -25), 
S(  29, -17), S(  18,   2), S(  21,   4), S(   4,   9), S(  14,   6), S(  23,  -3), S(   8, -13), S(  21, -18), 
S(  -7,  -7), S(   2,  -2), S(   1,   8), S(  22,   4), S(  21,   5), S(   4,   7), S(   6, -10), S( -16, -10), 
S( -25,   6), S(  -5,   8), S(   1,   8), S(   7,  16), S(  22,   7), S( -22,   7), S(  14,  -7), S( -16,  -5), 
S( -22,   2), S(  -8,   2), S(  35,  -4), S(   0,  10), S(  45,  -6), S(  45,   8), S(  24,  -1), S(  25,  -8), 
S( -49,  -6), S( -12,   0), S( -21,   0), S( -17, -10), S(  -4,  -1), S(  49, -16), S(  -3,   2), S(  13, -31), 
S( -36,  -6), S( -57, -17), S( -31, -14), S( -79,   3), S(-107,   6), S( -32,  -5), S(  -6, -16), S( -54,  -1), 
},

rookPSQT[U8_MAX_SQUARES] = {

S(   1,   0), S(   2,  -3), S(   8,  -4), S(  10,  -2), S(  22, -14), S(  18, -10), S( -17,  -7), S(  13, -28), 
S( -16,  -5), S( -16,  -1), S( -20,   6), S(  -7,  -1), S(   1,  -8), S(  -1,  -7), S(  16, -14), S( -35,  -6), 
S( -14,  -5), S( -13,  -1), S( -12,  -1), S(   5,  -6), S(   3,  -4), S(  10, -14), S(  16, -20), S(  10, -20), 
S( -21,   5), S( -34,  10), S( -31,  14), S( -19,  11), S( -18,  10), S( -17,   0), S(  -1,  -5), S(  -6, -10), 
S( -27,  12), S(  -9,   6), S(  -5,  11), S(  12,   2), S( -14,   5), S(   1,   3), S(  18,  -3), S(  18,  -3), 
S(   0,  10), S(  -6,  11), S( -17,  12), S(   7,   4), S(  29,  -4), S(  28,  -3), S(  68, -10), S(  22,  -6), 
S( -23,   8), S( -49,  25), S(  -5,  10), S(  31,  -3), S(  -6,   2), S(  51, -11), S(  68, -16), S(  45, -17), 
S( -20,  16), S(  10,   4), S(  -8,  11), S(   3,   4), S(  40,  -7), S(  61, -15), S(  50, -14), S(  -7,   1), 
},

queenPSQT[U8_MAX_SQUARES] = {

S(  18, -32), S(  15, -39), S(  17, -35), S(  20, -35), S(  18, -26), S(   2, -36), S( -12, -37), S(  12, -43), 
S(   9, -23), S(  10, -14), S(  11, -18), S(  17, -13), S(  19, -18), S(  31, -57), S(  32, -55), S(  17, -31), 
S(   5, -46), S(  14, -41), S(   3,  13), S(   7, -17), S(   2,   3), S(  14,  -6), S(  12,   6), S(   2, -15), 
S(   3, -19), S( -15,  19), S( -10,   2), S( -21,  34), S(  -3,  12), S(   5,  -7), S(   3,   6), S(  -3,  -7), 
S( -26,  -3), S(  -9,   0), S( -25,   6), S( -27,  34), S( -14,  36), S( -20,  41), S( -17,  31), S(   4,   2), 
S( -27, -20), S( -25,  -3), S(   5,   3), S(  -7,  13), S(  13,  48), S(  15,  16), S(  68, -18), S(   8,   4), 
S( -36,  13), S( -47,   9), S( -48,  32), S( -72,  75), S( -71,  66), S(  46,  50), S( -10,  58), S( 110, -62), 
S( -35,   2), S( -14,   3), S(  16,  -1), S(  27,  22), S(  41,  13), S(  44,  10), S(  10,  -6), S( -13,  40), 
},

kingPSQT[U8_MAX_SQUARES] = {

S( -24, -32), S(  40, -29), S(  -9,  -8), S( -85,   2), S( -33, -12), S( -52,   0), S(  40, -31), S(  29, -56), 
S(  42, -30), S(  19,  -7), S( -27,  11), S( -84,  27), S( -80,  28), S( -40,  21), S(  36,  -3), S(  30, -22), 
S(  45, -36), S(  72, -15), S( -33,  15), S( -79,  31), S( -74,  31), S( -32,  24), S(  37,   2), S( -14,  -5), 
S(  68, -42), S(  76, -16), S(  29,   7), S( -49,  25), S( -41,  28), S( -42,  27), S(  12,   8), S( -50,   0), 
S(  43, -33), S(  61,  -8), S(  55,   3), S(   8,  16), S(  -9,  18), S(  10,  22), S(  55,  10), S( -16,   3), 
S(  73, -29), S( 171, -15), S(  64,   2), S(  63,  -1), S(   2,  14), S(  97,  14), S( 118,  15), S(  21,   5), 
S(  35, -31), S( 142, -15), S(  84, -12), S(  31,  -6), S(  44,  -3), S( 108,   4), S(  42,  14), S( -13,   3), 
S(  65, -64), S(  94, -31), S(  92, -34), S(  43, -24), S(  76, -24), S(  73, -14), S(  52, -16), S(  17, -36), 
};



#endif
