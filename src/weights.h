#ifndef WEIGHTS 
#define WEIGHTS

#include "functions.h"


constexpr int

weight_val_pawn = S(72, 108),
weight_val_knight = S(280, 311),
weight_val_bishop = S(308, 359),
weight_val_rook = S(390, 635),
weight_val_queen = S(840, 1224), 

weight_isolated_pawn = S(-10, -8),
weight_backward_pawn = S(-7, -6),
weight_double_pawn = S(-7, -21),
weight_pawn_hole = S(-8, 1), 
arr_weight_pawn_chain[8] = { S(0, 0), S(0, 0), S(8, 12), S(12, 7), S(14, 33), S(84, -22), S(0, 0), S(0, 0), }, 
arr_weight_phalanx_pawn[8] = { S(0, 0), S(1, -4), S(-4, -1), S(10, 7), S(22, 28), S(64, 101), S(2, 185), S(0, 0), }, 
arr_weight_defended_phalanx_pawn[8] = { S(0, 0), S(0, 0), S(9, 6), S(9, 13), S(23, 32), S(150, 62), S(50, 87), S(0, 0), }, 
arr_weight_passed_pawn[8] = { S(0, 0), S(-13, 10), S(-24, 15), S(-15, 37), S(-1, 57), S(-10, 119), S(18, 131), S(0, 0), }, 
arr_weight_defended_passed_pawn[8] = { S(0, 0), S(0, 0), S(-6, 18), S(-4, 41), S(20, 73), S(53, 133), S(182, 152), S(0, 0), }, 

weight_knight_all_pawns_count = S(2, 6), 
weight_knight_outpost = S(13, 0), 
weight_undefended_knight = S(-12, 0), 
weight_knight_defended_by_pawn = S(-11, 8), 

weight_bishop_pair = S(17, 71),weight_undefended_bishop = S(-7, -3),

weight_rook_behind_stm_passed_pawn = S(16, -7), 
weight_rook_behind_opp_passed_pawn = S(-13, 11), 
weight_rook_flank_outpost = S(5, 4), 
weight_rook_half_open_file = S(17, 9), 
weight_rook_open_file = S(35, 6), 
weight_rook_enemy_queen_same_file = S(13, -10), 
weight_rook_on_seventh_rank = S(-1, 15), 
weight_rook_on_eight_rank = S(10, 16), 
weight_rook_supporting_friendly_rook = S(19, 25), 

weight_queen_underdeveloped_pieces = S(-5, -15), 

weight_king_pawn_shield = S(20, 4), 
weight_king_enemy_pawn_storm = S(-25, 23), 


arr_weight_knight_mobility[16] = { 

S(-38, -62), S(-20, -28), S(-11, -9), S(-5, 0), S(-1, 8), S(4, 13), S(10, 14), S(13, 14), 
S(16, 12), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 

}, 
arr_weight_bishop_mobility[16] = { 

S(-26, -34), S(-20, -26), S(-12, -13), S(-7, -2), S(1, 8), S(6, 18), S(11, 21), S(13, 23), 
S(14, 27), S(18, 24), S(21, 21), S(24, 21), S(30, 26), S(32, 12), S(0, 0), S(0, 0), 

}, 
arr_weight_rook_mobility[16] = { 

S(-25, -31), S(-14, -8), S(-11, -5), S(-8, -2), S(-9, 4), S(-5, 9), S(-3, 10), S(0, 14), 
S(2, 16), S(5, 19), S(5, 21), S(4, 25), S(9, 28), S(11, 25), S(8, 28), S(0, 0), 

}, 
arr_weight_queen_mobility[32] = { 

S(-6, -106), S(-6, -147), S(-13, -80), S(-12, -50), S(-11, -34), S(-7, -33), S(-5, -17), S(-5, -1), 
S(-3, 3), S(-2, 11), S(1, 15), S(2, 19), S(2, 24), S(2, 28), S(3, 34), S(1, 39), 
S(0, 43), S(4, 46), S(2, 52), S(8, 48), S(4, 54), S(12, 54), S(20, 50), S(20, 50), 
S(51, 38), S(78, 30), S(29, 45), S(70, 50), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 

}, 

weight_knight_attack = S(5, -14), 
weight_bishop_attack = S(5, 56), 
weight_rook_attack = S(3, -7), 
weight_queen_attack = S(9, -71), 
weight_rook_safe_contact_check = S(67, 23), 
weight_queen_safe_contact_check = S(128, 138), 
weight_knight_check = S(129, -56), 
weight_bishop_check = S(69, 188), 
weight_rook_check = S(101, -98), 
weight_queen_check = S(67, 0), 
weight_safety_adjustment = S(171, 15), 


pawnPSQT[U8_MAX_SQUARES] = {

S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S( -18,   8), S( -28,  12), S( -25,   5), S( -20,  -2), S( -20,  11), S(   6,   1), S(  13,  -3), S(  -7, -11), 
S( -17,   4), S( -18,   2), S( -11,  -4), S(  -6,  -5), S(   4,  -3), S(   0,  -4), S(  12,  -9), S(   0, -11), 
S( -20,   9), S( -15,   5), S(  -6,  -8), S(   5, -15), S(  10, -16), S(  10, -12), S(   0,  -7), S(  -8, -10), 
S( -14,  28), S(  -7,  15), S(  -1,   0), S(   9, -21), S(  27, -21), S(  19, -13), S(  10,   3), S(   4,   2), 
S(  11,  49), S(  13,  48), S(  42,   4), S(  43, -34), S(  53, -41), S(  80, -16), S(  50,  26), S(  21,  29), 
S(  46,  86), S(  66,  63), S(  44,  69), S(  81,  12), S(  51,  13), S(  36,  26), S( -47,  69), S( -66,  92), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
},

knightPSQT[U8_MAX_SQUARES] = {

S( -76, -10), S( -30, -16), S( -42,  -6), S( -24,  -4), S( -17,  -2), S( -13, -14), S( -24, -12), S( -52,  -3), 
S( -43,  -7), S( -30,   0), S( -23,   2), S(  -4,  -3), S(  -3,  -2), S( -10,  -3), S( -17,  -6), S( -19,   2), 
S( -34, -11), S( -13,  -4), S( -11,  -2), S(  -2,  19), S(  10,  14), S(  -2,  -7), S(   9, -12), S( -12,  -5), 
S( -15,   7), S(  -5,   7), S(   1,  23), S(   6,  21), S(  13,  26), S(  10,  13), S(  18,   7), S(   1,   1), 
S(  -4,   8), S(   4,  12), S(  16,  23), S(  38,  23), S(  26,  21), S(  42,  18), S(  19,  16), S(  34,  -1), 
S( -11,  -6), S(  21,   0), S(  31,  13), S(  41,  14), S(  79,  -2), S(  77,  -7), S(  44,  -5), S(  25, -12), 
S( -22, -12), S(  -9,  -1), S(  16,  -1), S(  34,   0), S(  15,  -6), S(  69, -18), S(  -2,  -2), S(  15, -24), 
S(-140, -52), S(-117,  -9), S( -60,   1), S( -26,  -5), S(   8,  -3), S( -54, -18), S( -89,  -2), S( -95, -68), 
},

bishopPSQT[U8_MAX_SQUARES] = {

S(  -7,  -8), S(  16,   2), S(  -3,   1), S( -11,   2), S(  -4,  -1), S(  -7,   7), S(  11, -12), S(   5, -25), 
S(   3,   6), S(   9,  -1), S(  12,  -4), S(  -4,   7), S(   6,   4), S(  13,  -3), S(  24,   1), S(   7, -12), 
S(  -4,   5), S(   6,  12), S(   4,  15), S(   2,  18), S(   4,  20), S(   7,  12), S(   6,   3), S(  13,  -5), 
S(  -9,   2), S( -11,  13), S(  -3,  21), S(  19,  19), S(  15,  18), S(  -3,  14), S(  -8,  11), S(   6, -10), 
S( -13,   7), S(  -1,  13), S(  10,  12), S(  29,  24), S(  22,  14), S(  15,  14), S(   2,  10), S( -11,   7), 
S(  -6,   8), S(  10,   6), S(  11,  10), S(  25,   1), S(  19,   2), S(  50,   9), S(  34,   2), S(  22,   8), 
S( -23,  -8), S(   0,  -1), S(  -9,   5), S( -24,   6), S(   9,  -6), S(   1,  -2), S(   1,   4), S( -14,  -8), 
S( -22,  -1), S( -52,  11), S( -52,   4), S( -88,  18), S( -69,  13), S( -58,   5), S( -19,   0), S( -52,   0), 
},

rookPSQT[U8_MAX_SQUARES] = {

S(  -8,   8), S( -10,   5), S(  -9,  12), S(  -3,   5), S(   6,  -2), S(  10,   1), S(  11,  -5), S(  -5,  -4), 
S( -28,   5), S( -25,   9), S( -17,   9), S( -14,   8), S(  -8,   0), S(   0,  -5), S(  13, -14), S( -14,  -8), 
S( -31,  13), S( -31,  10), S( -27,  11), S( -22,  11), S( -11,   5), S(  -3,  -2), S(  24, -20), S(   3, -15), 
S( -30,  19), S( -36,  22), S( -25,  21), S( -22,  19), S( -17,  14), S( -22,  14), S(   5,   3), S( -10,   2), 
S( -24,  27), S( -15,  23), S( -17,  30), S( -10,  23), S(  -5,  11), S(   5,   6), S(  18,   7), S(  15,   3), 
S( -19,  25), S(   6,  23), S(  -1,  25), S(   0,  21), S(  30,  10), S(  35,   4), S(  84,  -3), S(  48,  -2), 
S( -13,  11), S( -15,  21), S(   3,  22), S(  21,  11), S(   7,  13), S(  28,   3), S(  31,  -1), S(  53, -10), 
S(  -2,   0), S(  -9,   4), S(  -9,  11), S( -10,   7), S(  10,  -1), S(  16,  -4), S(  15,  -2), S(  39,  -9), 
},

queenPSQT[U8_MAX_SQUARES] = {

S(  -9, -20), S(  -9, -19), S(  -3, -21), S(   4,  -8), S(   3, -23), S(  -5, -28), S(  10, -49), S(  -3, -41), 
S(  -4, -22), S(  -7, -14), S(   0, -16), S(   7, -14), S(   4,  -9), S(  16, -33), S(  18, -56), S(  30, -78), 
S(  -4, -20), S(  -6,   2), S(  -7,  16), S(  -8,  15), S(  -5,  18), S(   8,  11), S(  14,  -2), S(  11, -19), 
S(  -4,  -9), S( -19,  26), S( -16,  25), S( -10,  41), S(  -8,  34), S(  -3,  29), S(  -2,  27), S(   8,  16), 
S( -16,   9), S( -15,  16), S( -13,  28), S( -12,  44), S( -13,  58), S(  -2,  48), S(   2,  46), S(   7,  32), 
S(  -3,  -6), S( -12,  12), S( -12,  40), S(  -2,  49), S(  11,  60), S(  42,  45), S(  45,  16), S(  51,  11), 
S( -16,   1), S( -31,  25), S( -26,  56), S( -36,  81), S( -27,  97), S(   0,  56), S( -10,  43), S(  35,  32), 
S( -20,  10), S( -29,  28), S(  -9,  45), S(  32,  29), S(  36,  27), S(  23,  37), S(  74, -25), S(  16,  14), 
},

kingPSQT[U8_MAX_SQUARES] = {

S(  42, -82), S(  67, -61), S(  41, -38), S( -48, -20), S(   5, -36), S( -24, -22), S(  43, -50), S(  42, -80), 
S(  53, -45), S(  11, -16), S(  -3,  -4), S( -34,   6), S( -39,  11), S( -22,   1), S(  19, -16), S(  25, -34), 
S( -30, -28), S( -14,  -2), S( -61,  19), S( -75,  32), S( -63,  30), S( -71,  22), S( -33,   3), S( -55,  -9), 
S( -62, -19), S( -56,  11), S( -87,  36), S(-123,  53), S(-121,  51), S( -83,  37), S( -91,  25), S(-126,   9), 
S( -58, -11), S( -59,  22), S( -86,  46), S(-129,  58), S(-114,  58), S( -82,  52), S( -73,  40), S(-108,  14), 
S( -92,  -2), S(  16,  19), S( -52,  38), S( -71,  49), S( -29,  50), S(  44,  43), S(  22,  39), S(  -9,   9), 
S( -74, -16), S( -39,  15), S( -78,  27), S(  35,  11), S(  -3,  26), S(   1,  39), S(  16,  32), S(   6,   0), 
S(  13,-101), S(  13, -55), S(  37, -40), S( -46,  -6), S( -16, -17), S(   9, -10), S(  50, -14), S(  83,-110), 
};


#endif
