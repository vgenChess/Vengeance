
#ifndef TUNED_EVALS_H
#define TUNED_EVALS_H

#include "functions.h"


constexpr int

weight_val_pawn = S(78, 127),
weight_val_knight = S(299, 252),
weight_val_bishop = S(343, 277),
weight_val_rook = S(495, 480),
weight_val_queen = S(953, 942), 

weight_isolated_pawn = S(-16, 3),
weight_backward_pawn = S(-8, -7),
weight_double_pawn = S(2, -33),
weight_pawn_hole = S(-8, 3), 

arr_weight_pawn_chain[8] = { 

S(   0,   0), S(   0,   0), S(   6,  10), S(  22,   6), 
S(  22,  23), S(   2,   8), S(   0,   0), S(   0,   0), 

}, 
arr_weight_phalanx_pawn[8] = { 

S(   0,   0), S(   3,  -7), S(  -4,  -3), S(   8,   3), 
S(  13,  21), S(  30,  39), S(  17,  41), S(   0,   0), 

}, 
arr_weight_defended_phalanx_pawn[8] = { 

S(   0,   0), S(   0,   0), S(   4,   4), S(  14,  10), 
S(  28,  33), S(   2,   8), S(   1,   3), S(   0,   0), 

}, 
arr_weight_passed_pawn[8] = { 

S(   0,   0), S(  -1, -15), S(  -7, -12), S(  -9,   8), 
S(  -2,  32), S(  18,  45), S(  37,  51), S(   0,   0), 

}, 
arr_weight_defended_passed_pawn[8] = { 

S(   0,   0), S(   0,   0), S(   1,   4), S(   1,  20), 
S(  33,  49), S(  48,  52), S(  34,  42), S(   0,   0), 

}, 

weight_minor_has_pawn_shield = S(11, 3), 

weight_knight_all_pawns_count = S(5, 5), 
weight_knight_outpost = S(10, 6), 
weight_undefended_knight = S(-10, -7), 
weight_knight_defended_by_pawn = S(-3, -5), 

weight_bishop_pair = S(42, 43),
weight_undefended_bishop = S(-2, -5),

weight_rook_behind_stm_passed_pawn = S(10, 0), 
weight_rook_behind_opp_passed_pawn = S(-18, 16), 
weight_rook_flank_outpost = S(-8, 7), 
weight_rook_half_open_file = S(17, 12), 
weight_rook_open_file = S(36, -3), 
weight_rook_enemy_queen_same_file = S(12, -14), 
weight_rook_on_seventh_rank = S(1, 10), 
weight_rook_on_eight_rank = S(6, 6), 
weight_rook_supporting_friendly_rook = S(23, 3), 

weight_queen_underdeveloped_pieces = S(-9, 18), 

arr_weight_knight_mobility[16] = { 

S( -43, -40), S( -14, -41), S(  -2, -28), S(   3, -24), 
S(  10, -19), S(  16, -15), S(  22, -16), S(  23, -14), 
S(  31, -27), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 
arr_weight_bishop_mobility[16] = { 

S(  -3, -33), S(   1, -25), S(  11, -24), S(  17, -18), 
S(  21, -11), S(  26,  -2), S(  27,   0), S(  30,   2), 
S(  30,   5), S(  38,   0), S(  39,   2), S(  43,  -5), 
S(  22,  14), S(  19,  -1), S(   0,   0), S(   0,   0), 

}, 
arr_weight_rook_mobility[16] = { 

S( -20, -34), S(  -7, -20), S(  -7, -13), S(  -4, -14), 
S(  -6,  -6), S(   1,  -7), S(   4,  -5), S(   3,   1), 
S(   9,  -1), S(  16,  -3), S(  12,   3), S(  11,   8), 
S(  24,  13), S(  24,   6), S(  23,  11), S(   0,   0), 

}, 
arr_weight_queen_mobility[32] = { 

S( -12,   2), S(  -8, -17), S(  -3, -22), S(  -6, -23), 
S(  -1, -30), S(   1, -16), S(   2, -18), S(   0,  -2), 
S(   2,   4), S(   7,   8), S(  10,  12), S(   9,   4), 
S(   7,  18), S(   9,  22), S(  12,  13), S(  13,  20), 
S(   2,  29), S(  15,  23), S(  19,  21), S(  14,  23), 
S(  10,  26), S(  18,  26), S(  13,  12), S(  23,  11), 
S(  18,  14), S(  13,  11), S(  11,  11), S(   4,   7), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 


weight_pawn_shield[8][8] = { 

S( -21,  -7), S(  12, -40), S(  17, -24), S(   0, -13), S(   1,   0), S(   4,  27), S(  28,  44), S(   0,   0), 
S( -30,  -5), S(  22, -24), S(  16, -19), S( -11,  -8), S( -21,   7), S(   3,  22), S(  19,  45), S(   0,   0), 
S( -26,  -8), S(  21, -18), S(  -7, -10), S( -11,  -8), S( -13,  -3), S(   9,   7), S(  21,  37), S(   0,   0), 
S( -19,  -7), S(   3, -15), S(   3,  -9), S(   2,  -3), S(  -8,   8), S( -21,  11), S(  13,  35), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 
weight_blocked_pawn_storm[8] = { 

S(   0,   0), S(   0,   0), S( -26,   3), S(  -2, -20), S(   4, -31), S(   3, -36), S(  -5, -53), S(   0,   0), 

}, 
weight_unblocked_pawn_storm[8][8] = { 

S(  -5, -26), S(  34,  46), S(  31,  54), S( -22,  37), S(  -1,  -2), S(   7, -19), S(   8, -11), S(   0,   0), 
S(   0, -23), S(  26,  49), S(  34,  56), S( -10,  33), S(  -1,   2), S(   9, -11), S(   2, -13), S(   0,   0), 
S(   0, -25), S(  11,  41), S( -20,  47), S(  -4,  25), S(  -1,  -4), S(  -1, -13), S(  10, -18), S(   0,   0), 
S(  -9, -12), S(  14,  46), S(  -5,  50), S( -17,  16), S(  -3,  -6), S(   0,  -7), S(  -8,  -6), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 

weight_knight_attack = S(15, 2), 
weight_bishop_attack = S(21, 18), 
weight_rook_attack = S(19, 2), 
weight_queen_attack = S(20, 2), 
weight_safe_knight_check = S(66, 33), 
weight_safe_bishop_check = S(44, 29), 
weight_safe_rook_check = S(57, 29), 
weight_safe_queen_check = S(43, 34), 
weight_unsafe_knight_check = S(16, 9), 
weight_unsafe_bishop_check = S(29, 29), 
weight_unsafe_rook_check = S(45, -3), 
weight_unsafe_queen_check = S(22, 28), 
weight_safety_adjustment = S(49, -4), 


pawnPSQT[U8_MAX_SQUARES] = {

S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S( -16, -12), S( -22,  -7), S( -22, -15), S( -20, -15), S( -18, -12), S( -10, -12), S(   7, -15), S(   4, -23), 
S( -13, -24), S( -21, -20), S(  -2, -31), S(  -3, -30), S(   5, -29), S(  -8, -22), S(  10, -24), S(  -3, -34), 
S( -21, -17), S( -19, -17), S(  -5, -33), S(   9, -44), S(  10, -45), S(   0, -29), S( -10, -21), S( -31, -28), 
S(  -9,  -2), S(  -7,  -9), S(  -6, -20), S(  11, -45), S(  19, -43), S(   7, -19), S(  -3, -11), S( -20, -18), 
S(  -8,  44), S(  -4,  40), S(  13,  30), S(  -5,   9), S(   6,   7), S(  30,  13), S(   2,  30), S(  -8,  30), 
S(  45,  53), S(  29,  50), S(  29,  47), S(  30,  40), S(  27,  33), S(  16,  39), S(  26,  49), S(   8,  49), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

},

knightPSQT[U8_MAX_SQUARES] = {

S( -30, -31), S( -14, -21), S( -35, -16), S( -15,  -7), S(  -9, -19), S( -21,  -9), S( -13, -30), S( -33, -25), 
S( -17, -22), S( -21, -18), S(  -7, -15), S(   5, -14), S(  10, -18), S(  -3, -11), S(  -7, -18), S(  -7, -24), 
S( -18, -16), S(  -6,  -4), S(  -1, -14), S(   1,  11), S(  11,   7), S(   3, -16), S(  17, -18), S( -20, -19), 
S(  -1,  -8), S(   1,   1), S(   8,  16), S(   7,  14), S(   7,  20), S(  15,   0), S(   1,  -5), S(  -7,  -5), 
S(  11,  -3), S(  15,  11), S(   3,  18), S(  33,  25), S(  19,  14), S(  23,  19), S(  14,   8), S(  20,  -9), 
S( -18, -23), S(   2, -14), S(  11,  14), S(  40,  12), S(  45,  -3), S(  46,  11), S(  34, -18), S(  -6, -17), 
S( -41, -31), S( -30, -12), S(  50, -14), S(   5,  -2), S(  42,  -9), S(  43, -20), S(  12, -17), S(  -9, -28), 
S( -53, -46), S( -16, -31), S( -20, -21), S( -16, -12), S(   2, -16), S( -36, -29), S( -15, -26), S( -40, -44), 

},

bishopPSQT[U8_MAX_SQUARES] = {

S(   8, -20), S(   6, -10), S(  17, -11), S(  10,  -2), S(   8,  -7), S( -11,  -1), S(   5, -22), S(  10, -16), 
S( -11,  -7), S(  37, -16), S(  18, -16), S(  13,  -1), S(  16,   1), S(  25,  -9), S(  39, -10), S(   9, -23), 
S(  31, -17), S(  24,   2), S(  23,   4), S(   2,  13), S(  14,  11), S(  25,  -1), S(  13, -13), S(  15,  -7), 
S(  -2, -10), S(   4,  -3), S(   6,  12), S(  30,   3), S(  30,   4), S(  13,   6), S(  14, -10), S( -11, -12), 
S( -18,   6), S(  -1,   9), S(   7,   5), S(  16,  13), S(  33,   2), S(  -2,   0), S(  20,  -5), S(  -1,  -9), 
S( -14,  -2), S(   0,   3), S(  40,   1), S(   7,   8), S(  35,   1), S(  35,  11), S(  22,   2), S(  26,  -6), 
S( -33, -11), S(   0,  -5), S(  -7,  -4), S( -13, -11), S(  11,  -6), S(  38, -11), S(  13,  -4), S(  12, -29), 
S( -17,  -8), S( -24, -22), S( -12, -15), S( -22, -11), S( -27, -10), S( -11,  -7), S(  -3, -16), S( -16, -12), 

},

rookPSQT[U8_MAX_SQUARES] = {

S(  -2,  -2), S(  -2,  -4), S(   2,  -2), S(   5,  -2), S(  14, -12), S(  10,  -6), S( -28,  -7), S(   6, -24), 
S( -25,  -5), S( -13,  -5), S( -17,   0), S( -13,  -2), S(  -9,  -8), S(  -1, -10), S(   4, -11), S( -33, -11), 
S( -19,  -7), S( -15,  -8), S( -14,  -3), S(   6, -11), S(  -2,  -4), S(   6, -13), S(   4, -19), S(   0, -19), 
S( -23,  -2), S( -27,   1), S( -32,   8), S( -19,   4), S( -16,   3), S( -19,  -3), S(  -2,  -9), S(  -7, -17), 
S( -25,   5), S( -15,  -1), S(  -7,   4), S(   6,  -1), S(  -7,  -5), S(   2,  -3), S(   5,  -7), S(  15, -11), 
S(  -1,   3), S(  -3,   3), S(  -8,   2), S(   6,  -1), S(  15,  -5), S(  16,  -6), S(  22,  -4), S(  18, -10), 
S( -13,   3), S( -32,  17), S(   6,   7), S(  17,   3), S(  -3,   0), S(  26,  -3), S(  26,  -4), S(  17,  -9), 
S(   0,   9), S(   2,   4), S(   4,   5), S(   9,  -3), S(  12,  -5), S(  14,  -7), S(   7,  -3), S(  -2,  -2), 

},

queenPSQT[U8_MAX_SQUARES] = {

S(   7, -12), S(   5, -15), S(  12, -18), S(  18, -18), S(  12,  -5), S( -12, -17), S( -16, -15), S(  -2, -13), 
S(  -1,  -9), S(   6,   1), S(   8,   1), S(  13,   5), S(  16,   0), S(  18, -16), S(  16, -12), S(   5,  -5), 
S(  -2, -22), S(  12, -26), S(   4,  18), S(   6,   0), S(   1,  13), S(  15,   5), S(  15,  12), S(   2,  -5), 
S(   3, -14), S(  -7,   9), S( -10,   7), S( -15,  29), S(   0,  19), S(   8,   6), S(   4,  11), S(  -8,   2), 
S( -20, -12), S(  -9,   6), S( -15,   4), S( -21,  29), S(   1,  24), S(  -7,  25), S(  -9,  22), S(   5,   9), 
S( -19, -23), S( -15,  -8), S(  16,   4), S(  -1,  14), S(  30,  33), S(  20,  15), S(  34,  15), S(  14,   3), 
S( -17,  -6), S( -32,  -7), S( -25,   0), S( -19,  25), S( -27,  18), S(  38,  40), S(  10,  26), S(  43,  -5), 
S( -10,  -8), S( -10,  -1), S(   8,   8), S(  22,  24), S(  23,  22), S(  19,  19), S(  -3,  -4), S(   4,  17), 

},

kingPSQT[U8_MAX_SQUARES] = {

S( -31, -30), S(  19, -18), S(  18, -21), S( -26, -20), S(  14, -33), S( -37, -13), S(   9, -18), S(  -3, -42), 
S(  11, -20), S(   4,   0), S(  -5,   6), S( -27,   9), S( -31,   9), S( -23,  13), S(   4,  10), S(   2, -14), 
S(   2, -21), S(  19,   6), S( -11,  16), S( -24,  18), S( -22,  16), S(  -9,  18), S(   7,  14), S( -26,  -2), 
S(   2, -20), S(  14,   5), S(  19,  12), S( -10,  16), S(  -3,  15), S( -12,  20), S(  -1,  18), S( -26,  -1), 
S(  -2, -15), S(  14,  13), S(  20,  17), S(  16,  12), S(   9,  13), S(  15,  23), S(  17,  27), S( -10,  14), 
S(   8,   1), S(  30,  25), S(  19,  16), S(  19,   8), S(   6,  14), S(  23,  29), S(  31,  42), S(   7,  22), 
S(   3,  -3), S(  21,  25), S(  19,   7), S(   9,  -5), S(  12,   0), S(  22,  25), S(  13,  33), S(   1,  16), 
S(   5, -14), S(   9,   2), S(   8, -12), S(   2, -21), S(   9, -12), S(  10,   3), S(   5,  10), S(   0,  -6), 

};


#endif
