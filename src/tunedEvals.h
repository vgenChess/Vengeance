
#ifndef TUNED_EVALS_H
#define TUNED_EVALS_H

#include "functions.h"


constexpr int

weight_val_pawn = S(69, 118),
weight_val_knight = S(284, 319),
weight_val_bishop = S(318, 369),
weight_val_rook = S(403, 655),
weight_val_queen = S(871, 1240), 

weight_isolated_pawn = S(-9, -10),
weight_backward_pawn = S(-9, -5),
weight_double_pawn = S(-1, -19),
weight_pawn_hole = S(-7, 1), 

arr_weight_pawn_chain[8] = { 

S(   0,   0), S(   0,   0), S(   9,  13), S(  12,   9), 
S(  21,  30), S(  46,  10), S(   0,   0), S(   0,   0), 

}, 
arr_weight_phalanx_pawn[8] = { 

S(   0,   0), S(   1,  -4), S(  -6,   0), S(   9,   8), 
S(  20,  32), S(  57, 127), S(  10, 180), S(   0,   0), 

}, 
arr_weight_defended_phalanx_pawn[8] = { 

S(   0,   0), S(   0,   0), S(   9,   6), S(  10,  15), 
S(  23,  39), S(  90,  83), S(  11,  34), S(   0,   0), 

}, 
arr_weight_passed_pawn[8] = { 

S(   0,   0), S( -10,  11), S( -20,  14), S( -17,  39), 
S(  -4,  63), S(  -3, 140), S(  53, 135), S(   0,   0), 

}, 
arr_weight_defended_passed_pawn[8] = { 

S(   0,   0), S(   0,   0), S(  -8,  21), S(  -2,  43), 
S(  19,  78), S(  42, 191), S( 157, 232), S(   0,   0), 

}, 

weight_minor_has_pawn_shield = S(10, 7), 

weight_knight_all_pawns_count = S(2, 6), 
weight_knight_outpost = S(17, 3), 
weight_undefended_knight = S(-12, 2), 
weight_knight_defended_by_pawn = S(-12, 7), 

weight_bishop_pair = S(18, 68),
weight_undefended_bishop = S(-8, -1),

weight_rook_behind_stm_passed_pawn = S(12, -7), 
weight_rook_behind_opp_passed_pawn = S(-17, 17), 
weight_rook_flank_outpost = S(4, 3), 
weight_rook_half_open_file = S(15, 12), 
weight_rook_open_file = S(33, 7), 
weight_rook_enemy_queen_same_file = S(12, -1), 
weight_rook_on_seventh_rank = S(1, 11), 
weight_rook_on_eight_rank = S(17, 21), 
weight_rook_supporting_friendly_rook = S(11, 21), 

weight_queen_underdeveloped_pieces = S(-6, -16), 

arr_weight_knight_mobility[16] = { 

S( -39, -59), S( -19, -23), S(  -9,  -5), S(  -3,   4), 
S(   0,  12), S(   6,  17), S(  12,  15), S(  15,  15), 
S(  15,  11), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 
arr_weight_bishop_mobility[16] = { 

S( -21, -33), S( -16, -25), S(  -9, -10), S(  -4,   0), 
S(   3,  11), S(   8,  21), S(  11,  24), S(  13,  26), 
S(  14,  30), S(  17,  27), S(  21,  22), S(  25,  20), 
S(  34,  23), S(  39,   9), S(   0,   0), S(   0,   0), 

}, 
arr_weight_rook_mobility[16] = { 

S( -21, -31), S( -11,  -7), S(  -8,  -4), S(  -5,   1), 
S(  -8,   7), S(  -4,  11), S(  -3,  13), S(  -2,  16), 
S(  -1,  18), S(   0,  22), S(   1,  24), S(  -2,  26), 
S(   0,  30), S(   3,  27), S(  -1,  28), S(   0,   0), 

}, 
arr_weight_queen_mobility[32] = { 

S(   4, -61), S(   3,-122), S(  -9, -56), S(  -8, -37), 
S(  -8, -20), S(  -4, -20), S(  -4,  -3), S(  -3,  12), 
S(  -2,  17), S(  -1,  23), S(   2,  28), S(   0,  31), 
S(   1,  37), S(   1,  39), S(  -1,  45), S(  -1,  47), 
S(   0,  46), S(   3,  45), S(   2,  45), S(  13,  35), 
S(  13,  28), S(  21,  31), S(  37,   2), S(  38,  -4), 
S(  70, -27), S(  75, -21), S(   8, -24), S(  19,  -2), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 


weight_pawn_shield[8][8] = { 

S( -24,  -4), S(  25, -37), S(  27, -23), S(   6,  -4), S(  -7,  12), S( -10,  47), S(  28,  51), S(   0,   0), 
S( -33,  -3), S(  30, -21), S(  17, -11), S( -12,   3), S( -14,  14), S( -12,  31), S(  -1,  49), S(   0,   0), 
S( -20,  -8), S(  27, -11), S(   0,  -2), S(  -5,  -2), S( -10,   9), S( -32,  33), S( -28,  59), S(   0,   0), 
S( -24,   4), S(  -8,   7), S(  -8,   5), S(  -9,  15), S( -16,  25), S( -46,  36), S( -12,  49), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 
weight_blocked_pawn_storm[8] = { 

S(   0,   0), S(   0,   0), S( -19, -25), S(   3, -20), S(   7, -31), S(  14, -43), S(  41, -68), S(   0,   0), 

}, 
weight_unblocked_pawn_storm[8][8] = { 

S( -29, -20), S( 151, 190), S( -18, 159), S( -44,  49), S( -15,   4), S(  -9, -14), S( -11, -12), S(   0,   0), 
S( -13, -12), S(  59, 240), S( -98, 174), S( -13,  32), S(  -4,   3), S(  11, -14), S(   6, -17), S(   0,   0), 
S(  13, -18), S( -27, 194), S(-102, 146), S( -10,  28), S(   8,   0), S(  17, -17), S(  21, -23), S(   0,   0), 
S(  -1, -10), S( -47, 176), S( -56, 113), S( -19,  22), S(   5,  -9), S(  13, -13), S(   7, -15), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 

weight_knight_attack = S(10, 150), 
weight_bishop_attack = S(3, 108), 
weight_rook_attack = S(4, 65), 
weight_queen_attack = S(12, -4), 
weight_safe_knight_check = S(157, 3), 
weight_safe_bishop_check = S(85, 310), 
weight_safe_rook_check = S(130, 52), 
weight_safe_queen_check = S(74, 17), 
weight_unsafe_knight_check = S(36, -95), 
weight_unsafe_bishop_check = S(59, 125), 
weight_unsafe_rook_check = S(77, -189), 
weight_unsafe_queen_check = S(34, 4), 
weight_safety_adjustment = S(22, -83), 


pawnPSQT[U8_MAX_SQUARES] = {

S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S( -17,   5), S( -23,   4), S( -25,  -4), S( -18, -11), S( -17,   5), S( -24,  -3), S(  -4,  -3), S( -15,  -2), 
S( -13,   0), S( -12,  -5), S(  -7, -11), S(   1, -13), S(   6, -10), S(  -6, -11), S(   8, -14), S(  -8,  -9), 
S( -16,   5), S(  -8,  -2), S(  -4, -13), S(   8, -25), S(  15, -28), S(  -1, -10), S(   4,  -9), S(  -7,  -7), 
S(  -7,  27), S(   1,  10), S(   4,  -4), S(  16, -30), S(  31, -29), S(   5,  -4), S(   8,   6), S(  -5,   9), 
S(  10,  42), S(   9,  46), S(  35,   2), S(  40, -36), S(  47, -36), S(  42,   9), S(  11,  43), S(   3,  36), 
S(  41,  92), S(  56,  78), S(  26,  77), S(  51,  34), S(  28,  44), S(  31,  67), S(  26, 104), S(  35,  96), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

},

knightPSQT[U8_MAX_SQUARES] = {

S( -66,  -6), S( -36, -20), S( -37,  -5), S( -22,  -7), S( -12,  -8), S( -17, -20), S( -33, -13), S( -42,   2), 
S( -44, -11), S( -30,  -5), S( -22,  -1), S(  -8,  -6), S(  -6,  -7), S( -14,  -3), S( -18, -13), S( -18, -11), 
S( -32,  -8), S(  -8,  -5), S( -15,  -2), S(  -6,  18), S(   5,  15), S(  -5, -12), S(  12, -17), S( -13,  -8), 
S( -10,   8), S(  -1,   9), S(   3,  25), S(   6,  22), S(   8,  26), S(   9,  12), S(  12,   8), S(   7,  -3), 
S(   3,   8), S(   8,  16), S(  22,  26), S(  29,  27), S(  26,  25), S(  35,  22), S(  24,  17), S(  33,   2), 
S(   0,  -3), S(  28,   2), S(  37,  19), S(  53,  15), S(  91,   0), S(  78,  -7), S(  48,  -7), S(  26, -13), 
S( -20, -11), S(   6,  -3), S(  32,  -7), S(  42,   0), S(  22,  -9), S(  88, -22), S(   5,  -3), S(  19, -28), 
S(-135, -62), S( -84, -15), S( -69,   3), S( -16, -10), S(  10,  -3), S( -49, -28), S( -92, -10), S( -98, -81), 

},

bishopPSQT[U8_MAX_SQUARES] = {

S(  -9,  -7), S(   6,   6), S( -11,   3), S( -11,   1), S(  -2,  -2), S( -16,   3), S(  -3, -11), S(   8, -24), 
S(  -7,   3), S(   4,  -3), S(   6,  -3), S(  -8,   6), S(  -1,   0), S(   5,  -8), S(  15,  -9), S(  -1, -17), 
S(  -8,   8), S(   2,  15), S(   3,  14), S(  -7,  14), S(  -2,  18), S(   4,   9), S(   7,   1), S(  11, -10), 
S(  -7,   2), S(  -5,  13), S(  -7,  19), S(  21,  18), S(  12,  17), S(  -3,  12), S(  -6,  10), S(   8, -11), 
S(  -8,   9), S(   3,  11), S(  18,  11), S(  27,  25), S(  29,  14), S(  14,  19), S(   5,  11), S( -14,  11), 
S(  -4,   7), S(  15,   1), S(  19,  13), S(  34,  -2), S(  19,   3), S(  58,  11), S(  22,  14), S(  24,  10), 
S(  -8, -11), S(  12,  -1), S(   4,   3), S( -20,   7), S(  23,  -7), S(   7,   2), S(  24,   0), S( -15,  -8), 
S( -26,   1), S( -51,  15), S( -43,   4), S( -84,  22), S( -72,  13), S( -71,   4), S( -22,   3), S( -50,  -2), 

},

rookPSQT[U8_MAX_SQUARES] = {

S( -12,   4), S( -10,   2), S( -11,   9), S(  -6,   4), S(   3,  -5), S(   2,  -3), S(   3,  -7), S(  -2, -13), 
S( -26,   2), S( -25,   5), S( -15,   7), S( -11,   2), S(  -5,  -3), S(   0,  -9), S(  14, -20), S( -11, -14), 
S( -27,  11), S( -26,   8), S( -23,   8), S( -18,   7), S( -10,   6), S(  -3,  -5), S(  16, -20), S(   1, -17), 
S( -26,  20), S( -33,  23), S( -19,  19), S( -16,  17), S( -13,  13), S( -17,  13), S(  -1,   2), S( -13,   2), 
S( -19,  30), S( -14,  25), S(  -9,  30), S(  -2,  23), S(  -3,  12), S(  13,   5), S(   4,  12), S(   0,  12), 
S( -20,  30), S(   9,  26), S(   3,  28), S(   2,  21), S(  30,  12), S(  32,   8), S(  67,   3), S(  17,  10), 
S( -18,  10), S( -20,  20), S(  -2,  19), S(  15,  10), S(  -3,  10), S(  28,   0), S(  17,  -2), S(  37, -10), 
S(  -2,   9), S(  -3,  10), S(   0,  14), S(  -9,  13), S(  11,   7), S(  12,   5), S(  27,   1), S(  33,  -1), 

},

queenPSQT[U8_MAX_SQUARES] = {

S(  -7, -19), S(  -4, -23), S(  -2, -14), S(   2,  -6), S(   5, -25), S(   0, -34), S(   2, -50), S(   1, -42), 
S(   1, -31), S(  -2, -13), S(   3, -17), S(   7, -11), S(   6, -10), S(  18, -37), S(  16, -48), S(  26, -78), 
S(  -1, -15), S(  -1,   3), S(  -3,  21), S(  -6,  13), S(  -1,  15), S(  10,   2), S(  17, -10), S(  11,  -9), 
S(   0,  -7), S( -14,  35), S( -11,  27), S(  -6,  43), S(  -2,  32), S(   1,  18), S(   4,  14), S(  10,  12), 
S(  -9,   7), S(  -8,  13), S(  -9,  33), S( -12,  47), S( -12,  49), S(   2,  26), S(  -1,  38), S(   4,  23), 
S(  -2,   0), S(  -7,  13), S(  -7,  32), S(  -7,  42), S(  -3,  57), S(  13,  46), S(  23,  25), S(  12,  28), 
S(  -7,   1), S( -25,  22), S( -22,  47), S( -39,  74), S( -50, 106), S( -13,  62), S(  -9,  38), S(  34,  35), 
S( -39,  29), S( -33,  26), S( -33,  48), S(  -1,  48), S( -15,  61), S(   6,  37), S(  23,   6), S( -24,  43), 

},

kingPSQT[U8_MAX_SQUARES] = {

S(  16, -65), S(  26, -35), S(  11, -42), S( -38, -48), S(  13, -68), S( -30, -31), S(  13, -28), S(  14, -62), 
S(  31, -34), S(  15,  -6), S(   0, -12), S( -16, -17), S( -22, -14), S( -15,  -9), S(  11,  -2), S(  10, -25), 
S(   2, -24), S(  29,   1), S( -11,   7), S( -41,  11), S( -31,   7), S( -26,   8), S(   6,   5), S( -27, -10), 
S( -22,  -9), S(  11,  18), S( -39,  29), S( -85,  37), S( -71,  31), S( -32,  27), S( -30,  29), S( -80,  12), 
S( -15,   4), S(  15,  37), S( -43,  47), S( -73,  45), S( -74,  47), S( -37,  54), S(  -8,  53), S( -74,  32), 
S( -25,  18), S(  65,  43), S(  -9,  47), S( -31,  47), S(  13,  48), S(  88,  52), S(  64,  67), S(  22,  32), 
S( -25,   7), S(  40,  36), S( -13,  33), S(  34,  13), S(   3,  30), S(  53,  47), S(  49,  59), S(   3,  26), 
S(  17, -64), S(  15, -17), S(  30, -28), S( -37, -20), S( -17, -18), S(  -8,   4), S(  41,  10), S(  29, -73), 

};


#endif
