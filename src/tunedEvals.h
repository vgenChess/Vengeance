
#ifndef TUNED_EVALS_H
#define TUNED_EVALS_H

#include "functions.h"


constexpr int

weight_val_pawn = S(83, 97),
weight_val_knight = S(335, 234),
weight_val_bishop = S(409, 271),
weight_val_rook = S(561, 482),
weight_val_queen = S(1136, 946), 

weight_isolated_pawn = S(-15, -1),
weight_backward_pawn = S(-8, -7),
weight_double_pawn = S(0, -22),
weight_pawn_hole = S(-9, 0), 

arr_weight_pawn_chain[8] = { 

S(   0,   0), S(   0,   0), S(   5,  13), S(  23,   9), 
S(  30,  24), S(  24,  28), S(   0,   0), S(   0,   0), 

}, 
arr_weight_phalanx_pawn[8] = { 

S(   0,   0), S(   3,  -6), S(  -4,  -3), S(   8,   3), 
S(  14,  22), S(  65,  57), S(  49, 106), S(   0,   0), 

}, 
arr_weight_defended_phalanx_pawn[8] = { 

S(   0,   0), S(   0,   0), S(   4,   6), S(  13,  12), 
S(  31,  52), S(  20,  21), S(  10,  14), S(   0,   0), 

}, 
arr_weight_passed_pawn[8] = { 

S(   0,   0), S(  -7,   3), S( -13,   6), S( -15,  25), 
S(  -8,  52), S(   2, 114), S(  21, 130), S(   0,   0), 

}, 
arr_weight_defended_passed_pawn[8] = { 

S(   0,   0), S(   0,   0), S(  -4,  17), S(  -3,  33), 
S(  25,  70), S(  88, 140), S( 167, 140), S(   0,   0), 

}, 

weight_minor_has_pawn_shield = S(11, 6), 

weight_knight_all_pawns_count = S(6, 6), 
weight_knight_outpost = S(10, 6), 
weight_undefended_knight = S(-13, -1), 
weight_knight_defended_by_pawn = S(-4, -1), 

weight_bishop_pair = S(40, 51),
weight_undefended_bishop = S(-4, -2),

weight_rook_behind_stm_passed_pawn = S(15, -8), 
weight_rook_behind_opp_passed_pawn = S(-20, 23), 
weight_rook_flank_outpost = S(-7, 7), 
weight_rook_half_open_file = S(18, 7), 
weight_rook_open_file = S(40, -8), 
weight_rook_enemy_queen_same_file = S(11, -11), 
weight_rook_on_seventh_rank = S(3, 8), 
weight_rook_on_eight_rank = S(10, 7), 
weight_rook_supporting_friendly_rook = S(31, 1), 

weight_queen_underdeveloped_pieces = S(-9, 19), 

arr_weight_knight_mobility[16] = { 

S( -45, -50), S( -14, -37), S(  -3, -22), S(   3, -20), 
S(  10, -15), S(  16, -10), S(  21,  -9), S(  22,  -8), 
S(  35, -20), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 
arr_weight_bishop_mobility[16] = { 

S( -11, -36), S(  -8, -25), S(   2, -21), S(   8, -15), 
S(  12,  -8), S(  18,   0), S(  20,   2), S(  23,   4), 
S(  24,   6), S(  33,   1), S(  36,   0), S(  45,  -7), 
S(  36,   9), S(  29,  -3), S(   0,   0), S(   0,   0), 

}, 
arr_weight_rook_mobility[16] = { 

S( -16, -40), S(  -4, -22), S(  -3, -15), S(  -1, -14), 
S(  -2,  -6), S(   6,  -6), S(   9,  -4), S(   6,   2), 
S(  14,   0), S(  19,  -1), S(  15,   6), S(  14,  12), 
S(  26,  17), S(  30,   8), S(  25,  14), S(   0,   0), 

}, 
arr_weight_queen_mobility[32] = { 

S( -16,  14), S(  -8, -57), S(  -3, -50), S(  -7, -46), 
S(  -2, -53), S(  -1, -27), S(   1, -28), S(  -2,  -8), 
S(   1,  -2), S(   6,   1), S(   8,   8), S(   8,   0), 
S(   6,  11), S(   8,  18), S(  11,   6), S(  12,  17), 
S(   0,  25), S(  15,  17), S(  18,  17), S(  12,  19), 
S(   6,  24), S(  15,  22), S(  12,   3), S(  39,  -8), 
S(  29,  -3), S(  17,  -4), S(  32,  10), S(  -5,  -7), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 


weight_pawn_shield[8][8] = { 

S( -24,  -5), S(  14, -34), S(  17, -16), S(   1,  -6), S(  -3,   6), S(  -4,  23), S(  19,  30), S(   0,   0), 
S( -34,   1), S(  24, -17), S(  16, -11), S( -12,   0), S( -25,  14), S( -14,  16), S( -25,  49), S(   0,   0), 
S( -25,  -1), S(  29, -11), S(  -6,  -1), S( -11,   0), S( -11,   6), S(   4,   9), S(  23,  33), S(   0,   0), 
S( -22,  -3), S(  -1,  -8), S(  -1,   0), S(  -1,   5), S( -12,  16), S( -35,  17), S( -11,  42), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 
weight_blocked_pawn_storm[8] = { 

S(   0,   0), S(   0,   0), S( -25, -20), S(  -1, -21), S(   6, -29), S(   5, -35), S(  21, -55), S(   0,   0), 

}, 
weight_unblocked_pawn_storm[8][8] = { 

S(  -1, -22), S(  65, 173), S(  -2, 130), S( -36,  49), S(  -5,   4), S(   5, -16), S(   7,  -8), S(   0,   0), 
S(   2, -21), S(  40, 180), S(   9, 121), S( -16,  40), S(  -3,   5), S(   8, -10), S(   1, -10), S(   0,   0), 
S(   4, -22), S(  -2, 141), S( -63, 100), S(  -3,  28), S(   1,  -3), S(   0, -13), S(  12, -17), S(   0,   0), 
S( -10,  -7), S(   5, 136), S( -30,  92), S( -16,  19), S(  -1,  -5), S(   1,  -6), S(  -8,  -6), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 

weight_knight_attack = S(17, 23), 
weight_bishop_attack = S(9, 37), 
weight_rook_attack = S(10, 22), 
weight_queen_attack = S(14, 22), 
weight_safe_knight_check = S(130, 37), 
weight_safe_bishop_check = S(44, 186), 
weight_safe_rook_check = S(73, 21), 
weight_safe_queen_check = S(42, 57), 
weight_unsafe_knight_check = S(15, 0), 
weight_unsafe_bishop_check = S(29, 98), 
weight_unsafe_rook_check = S(41, -21), 
weight_unsafe_queen_check = S(22, 22), 
weight_safety_adjustment = S(74, -44), 


pawnPSQT[U8_MAX_SQUARES] = {

S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S( -10,   5), S( -16,   2), S( -17,  -2), S( -14,  -6), S( -14,  -4), S( -12,   2), S(  11,  -5), S(   1,  -4), 
S(  -7,  -6), S( -14,  -7), S(   5, -15), S(   5, -19), S(  13, -15), S(  -3,  -7), S(  14, -10), S(  -5, -14), 
S( -16,   2), S( -13,  -1), S(   2, -15), S(  16, -27), S(  18, -29), S(   6, -11), S(  -8,  -4), S( -35,  -7), 
S(  -4,  16), S(  -1,   6), S(  -1,  -3), S(  19, -32), S(  27, -29), S(   9,  -3), S(   0,   6), S( -23,   2), 
S( -12,  46), S( -13,  36), S(  18,  19), S(   1, -12), S(  11, -11), S(  31,  12), S(  10,  29), S( -13,  29), 
S(  28,  83), S(   6,  73), S(   1,  61), S(  29,  32), S(  35,  17), S(  29,  47), S(  34,  78), S( -32,  71), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

},

knightPSQT[U8_MAX_SQUARES] = {

S( -51, -38), S( -14, -14), S( -45,  -3), S( -15,  -3), S(  -7, -16), S( -21,  -2), S( -16, -25), S( -56, -22), 
S( -14, -24), S( -23, -15), S(  -6, -12), S(   7, -11), S(  11, -15), S(  -6,  -6), S(  -1, -17), S(  -7, -26), 
S( -17, -12), S(  -3,  -2), S(   2, -14), S(   2,  13), S(  13,   9), S(   5, -16), S(  19, -16), S( -20, -18), 
S(   2,  -8), S(   2,   4), S(  11,  17), S(   9,  16), S(  10,  21), S(  16,   2), S(  -3,   1), S(  -4,  -3), 
S(  15,  -1), S(  17,  12), S(   3,  22), S(  34,  25), S(  22,  17), S(  19,  22), S(  18,   9), S(  22,  -7), 
S( -22, -21), S(   5, -12), S(  11,  17), S(  55,   8), S(  78, -15), S(  99,  -6), S(  52, -23), S( -10, -13), 
S( -63, -21), S( -38,  -3), S(  78, -28), S(  10,   2), S(  77, -20), S(  69, -30), S(  19, -16), S(  -2, -33), 
S(-180, -42), S( -32, -42), S( -41, -20), S( -28,  -6), S(  12, -17), S( -81, -23), S( -60, -31), S( -89, -80), 

},

bishopPSQT[U8_MAX_SQUARES] = {

S(   3, -20), S(  -1,  -8), S(   7,  -8), S(   1,   0), S(   4,  -6), S( -15,  -1), S(   8, -26), S(  12, -20), 
S( -22,   0), S(  32, -17), S(  11, -14), S(   6,   1), S(  12,   0), S(  21,  -9), S(  40, -16), S(   3, -28), 
S(  23, -18), S(  17,   5), S(  16,   6), S(  -3,  13), S(  11,  10), S(  23,   0), S(   9, -14), S(  15, -11), 
S(  -6, -12), S(  -4,  -1), S(   1,  12), S(  24,   7), S(  22,   7), S(   6,   9), S(   7,  -7), S( -16, -13), 
S( -30,   8), S(  -5,  10), S(   0,   8), S(   8,  16), S(  25,   6), S( -17,   5), S(  14,  -3), S(  -9, -10), 
S( -24,   0), S(  -7,   3), S(  39,  -1), S(  -1,  10), S(  43,  -3), S(  45,   8), S(  25,   1), S(  18,  -5), 
S( -48,  -6), S(  -9,  -4), S( -17,  -4), S( -22, -10), S(   6,  -9), S(  51, -17), S(   6,  -2), S(   9, -32), 
S( -32,  -5), S( -45, -21), S( -20, -16), S( -50,  -6), S( -80,   0), S( -19,  -7), S(  -5, -16), S( -37,  -8), 

},

rookPSQT[U8_MAX_SQUARES] = {

S(   0,   2), S(   1,  -2), S(   4,   2), S(   9,   1), S(  17, -10), S(  17,  -6), S( -21,  -5), S(  14, -27), 
S( -21,  -4), S( -12,   0), S( -14,   4), S(  -9,   2), S(  -4,  -7), S(   5,  -8), S(  12, -11), S( -37,  -3), 
S( -16,  -3), S( -13,  -5), S( -14,   0), S(   9,  -7), S(   2,  -1), S(  12, -13), S(  11, -16), S(   8, -18), 
S( -20,   2), S( -35,   9), S( -40,  15), S( -22,  10), S( -17,  10), S( -17,   2), S(  -2,  -4), S(  -3, -13), 
S( -29,  12), S( -14,   3), S( -10,  10), S(   9,   4), S(  -7,   2), S(   6,   2), S(  10,  -2), S(  22,  -8), 
S(  -1,   8), S(  -2,   8), S( -10,   9), S(   7,   4), S(  23,  -1), S(  25,  -2), S(  50,  -6), S(  27,  -6), 
S( -18,   5), S( -42,  23), S(   5,   8), S(  23,   2), S(  -6,   2), S(  49,  -9), S(  46,  -7), S(  35, -12), 
S(  -3,  12), S(   6,   6), S(   4,   8), S(  13,  -1), S(  23,  -4), S(  33,  -7), S(  20,  -4), S(   3,   2), 

},

queenPSQT[U8_MAX_SQUARES] = {

S(   7, -17), S(   5, -27), S(  11, -30), S(  17, -23), S(  13, -14), S(  -8, -23), S( -18, -25), S(   5, -25), 
S(   0, -18), S(   5,  -4), S(   6,  -3), S(  12,   0), S(  15,  -7), S(  20, -33), S(  21, -26), S(   8, -14), 
S(  -1, -39), S(  12, -38), S(  -1,  22), S(   4,  -6), S(   2,  10), S(  13,  -2), S(  16,   8), S(   3, -13), 
S(   1, -22), S( -13,  11), S( -12,   6), S( -19,  32), S(  -4,  19), S(   9,  -2), S(   2,   8), S( -10,   2), 
S( -28, -10), S( -11,   5), S( -21,   4), S( -27,  34), S(  -7,  29), S( -16,  38), S( -14,  31), S(   2,  10), 
S( -23, -28), S( -19,  -9), S(  12,  -5), S(  -6,  15), S(  27,  45), S(  23,  12), S(  56,   3), S(  12,   2), 
S( -27,  -1), S( -43,   6), S( -38,  10), S( -39,  43), S( -46,  33), S(  48,  56), S(  -1,  48), S(  81, -38), 
S( -17, -13), S( -16,  -3), S(  11,   6), S(  31,  25), S(  33,  19), S(  28,  19), S(  -4,  -6), S(  -1,  23), 

},

kingPSQT[U8_MAX_SQUARES] = {

S( -53, -37), S(  14, -25), S(  12, -25), S( -26, -24), S(  15, -40), S( -42, -16), S(   4, -24), S(  -5, -53), 
S(  27, -29), S(   3,  -5), S(  -3,   1), S( -29,   5), S( -34,   6), S( -27,  10), S(   1,   6), S(  -2, -18), 
S(  17, -28), S(  36,  -1), S( -10,  13), S( -33,  18), S( -29,  14), S( -11,  15), S(  11,  10), S( -37,  -3), 
S(  17, -22), S(  34,   3), S(  42,   7), S( -29,  17), S(  -7,  15), S( -30,  21), S(  -1,  18), S( -56,   4), 
S(  -4, -14), S(  27,  11), S(  42,  13), S(  30,   8), S(  13,  12), S(  26,  23), S(  31,  28), S( -19,  15), 
S(  29,  -2), S(  95,  15), S(  52,  10), S(  47,   1), S(   9,  12), S(  64,  23), S(  65,  39), S(  13,  23), 
S(   3,  -9), S(  65,  17), S(  62,  -3), S(  32, -11), S(  37,  -7), S(  68,  16), S(  16,  34), S( -11,  17), 
S(  21, -32), S(  29,  -8), S(  45, -27), S(  15, -35), S(  34, -23), S(  43,  -6), S(  10,   6), S(  -4, -13), 

};


#endif
