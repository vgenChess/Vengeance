
#ifndef TUNED_EVALS_H
#define TUNED_EVALS_H

#include "functions.h"


constexpr int

weight_val_pawn = S(83, 122),
weight_val_knight = S(292, 277),
weight_val_bishop = S(321, 298),
weight_val_rook = S(481, 482),
weight_val_queen = S(922, 921), 

weight_isolated_pawn = S(-11, 3),
weight_backward_pawn = S(-8, -7),
weight_double_pawn = S(-8, -22),
weight_pawn_hole = S(-5, 3), 

arr_weight_pawn_chain[8] = { 

S(   0,   0), S(   0,   0), S(   5,   8), S(  18,   6), 
S(  11,  14), S(   1,   4), S(   0,   0), S(   0,   0), 

}, 
arr_weight_phalanx_pawn[8] = { 

S(   0,   0), S(   1,  -5), S(  -2,  -5), S(   8,   1), 
S(  13,  14), S(  14,  19), S(   7,  17), S(   0,   0), 

}, 
arr_weight_defended_phalanx_pawn[8] = { 

S(   0,   0), S(   0,   0), S(   3,   4), S(  15,   6), 
S(  15,  15), S(   1,   4), S(   0,   1), S(   0,   0), 

}, 
arr_weight_passed_pawn[8] = { 

S(   0,   0), S( -11, -17), S( -15, -17), S( -13,  -2), 
S(  -2,  16), S(  16,  21), S(  22,  24), S(   0,   0), 

}, 
arr_weight_defended_passed_pawn[8] = { 

S(   0,   0), S(   0,   0), S(  -3,  -7), S(  -1,   9), 
S(  21,  23), S(  20,  22), S(  14,  18), S(   0,   0), 

}, 

weight_minor_has_pawn_shield = S(12, 0), 

weight_knight_all_pawns_count = S(3, 2), 
weight_knight_outpost = S(6, 4), 
weight_undefended_knight = S(-6, -14), 
weight_knight_defended_by_pawn = S(1, -2), 

weight_bishop_pair = S(22, 22),
weight_undefended_bishop = S(5, -13),

weight_rook_behind_stm_passed_pawn = S(-3, 13), 
weight_rook_behind_opp_passed_pawn = S(-10, 4), 
weight_rook_flank_outpost = S(-9, 1), 
weight_rook_half_open_file = S(13, 13), 
weight_rook_open_file = S(19, 8), 
weight_rook_enemy_queen_same_file = S(8, -13), 
weight_rook_on_seventh_rank = S(1, 6), 
weight_rook_on_eight_rank = S(5, 7), 
weight_rook_supporting_friendly_rook = S(10, 7), 

weight_queen_underdeveloped_pieces = S(-10, 1), 

arr_weight_knight_mobility[16] = { 

S( -22, -19), S( -15, -20), S(  -5, -15), S(   0, -13), 
S(   7,  -8), S(  12,  -2), S(  16,  -4), S(  15,  -1), 
S(  15, -13), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 
arr_weight_bishop_mobility[16] = { 

S( -13, -16), S(  -5, -15), S(   5, -17), S(  10, -14), 
S(  14,  -9), S(  16,   3), S(  17,   7), S(  18,   8), 
S(  18,  11), S(  20,   8), S(  20,   9), S(  19,   3), 
S(  11,  10), S(   8,   1), S(   0,   0), S(   0,   0), 

}, 
arr_weight_rook_mobility[16] = { 

S( -16, -19), S(  -9, -16), S(  -8, -14), S(  -8, -12), 
S( -10,  -7), S(  -2,  -9), S(   1,  -7), S(   0,  -2), 
S(   7,  -3), S(  13,  -3), S(  12,   0), S(  12,   3), 
S(  16,  12), S(  15,   7), S(  14,   8), S(   0,   0), 

}, 
arr_weight_queen_mobility[32] = { 

S(  -9,  -1), S( -12,  -7), S(  -9,  -9), S(  -9, -12), 
S(  -5, -14), S(  -2, -12), S(   0, -14), S(  -1,  -7), 
S(   1,  -3), S(   5,   3), S(   7,   6), S(   7,   1), 
S(   6,   7), S(   8,  11), S(  10,   8), S(  12,  13), 
S(   5,  14), S(  14,  15), S(  14,  15), S(  11,  15), 
S(  12,  16), S(  14,  17), S(  11,  11), S(  11,  11), 
S(   8,   9), S(   9,  10), S(   4,   4), S(   4,   6), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 


weight_pawn_shield[8][8] = { 

S( -14,  -4), S(   8, -22), S(  14, -19), S(  -8, -10), S(   4,  -1), S(  11,  19), S(  15,  22), S(   0,   0), 
S( -19,  -5), S(  13, -11), S(  11, -14), S( -10,  -8), S( -10,   5), S(  11,  19), S(  14,  22), S(   0,   0), 
S( -17,  -6), S(  11, -10), S(  -6,  -8), S(  -5, -10), S( -10,  -3), S(  10,  13), S(  15,  20), S(   0,   0), 
S( -15,  -2), S(   0,  -8), S(   5,  -6), S(   4,  -5), S(  -5,   1), S(  -7,  14), S(  13,  20), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 
weight_blocked_pawn_storm[8][8] = { 

S(   0,   0), S(   0,   0), S(  -3,  -9), S(  12,  -9), S(  14, -16), S(  -1, -17), S(   0, -10), S(   0,   0), 
S(   0,   0), S(   0,   0), S(  -7,  -8), S(  12, -10), S(  -2, -10), S(  -9, -18), S(   0, -10), S(   0,   0), 
S(   0,   0), S(   0,   0), S( -15,   4), S(  -9,  -2), S(  -5, -11), S(  -7, -15), S(  -4, -19), S(   0,   0), 
S(   0,   0), S(   0,   0), S(  -3,  -2), S(  -7,  -6), S(   1, -12), S(  -1, -12), S(  -1,  -9), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 
weight_unblocked_pawn_storm[8][8] = { 

S( -11, -13), S(   9,  15), S(  13,  20), S(  -1,  22), S(   8,   4), S(   7,  -6), S(  10,   1), S(   0,   0), 
S(   6,  -9), S(   5,  15), S(  13,  21), S(   6,  22), S(   5,   8), S(   8,  -2), S(   2,  -2), S(   0,   0), 
S(  -4, -13), S(  -5,   9), S( -11,  16), S(  -4,  20), S(   1,   6), S(  -1,  -4), S(   4,  -7), S(   0,   0), 
S( -10,  -3), S(   1,  15), S(   4,  19), S( -13,  18), S(  -4,   8), S(   0,   5), S(  -4,   1), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

}, 

weight_knight_attack = S(17, -4), 
weight_bishop_attack = S(27, 13), 
weight_rook_attack = S(23, -3), 
weight_queen_attack = S(25, 9), 
weight_safe_knight_check = S(30, 14), 
weight_safe_bishop_check = S(28, 13), 
weight_safe_rook_check = S(28, 14), 
weight_safe_queen_check = S(30, 19), 
weight_unsafe_knight_check = S(22, 10), 
weight_unsafe_bishop_check = S(26, 15), 
weight_unsafe_rook_check = S(28, 9), 
weight_unsafe_queen_check = S(24, 17), 
weight_safety_adjustment = S(28, 6), 


pawnPSQT[U8_MAX_SQUARES] = {

S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 
S( -13,  -9), S( -16,  -1), S( -20,  -6), S( -11, -10), S(  -9,  -7), S(   2,  -6), S(  10,  -9), S(   8, -17), 
S( -12, -15), S( -18, -10), S(  -5, -18), S(  -7, -13), S(   0, -13), S(  -6, -12), S(   9, -15), S(  -1, -19), 
S( -18, -10), S( -18,  -8), S( -13, -18), S(  -1, -22), S(   0, -22), S(  -3, -14), S( -10, -12), S( -16, -17), 
S(  -9,   8), S(  -6,   1), S( -11,  -8), S(   3, -21), S(  10, -23), S(   5, -11), S(  -1,  -5), S( -13,  -6), 
S(  12,  22), S(  12,  21), S(  16,  19), S(   0,  15), S(   9,  12), S(  16,  13), S(   4,  18), S(   8,  19), 
S(  21,  24), S(  20,  23), S(  17,  22), S(  17,  21), S(  16,  19), S(  14,  20), S(  15,  22), S(  13,  23), 
S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), 

},

knightPSQT[U8_MAX_SQUARES] = {

S( -12, -14), S( -14, -16), S( -17, -13), S(  -9,  -7), S( -12, -11), S(  -8,  -9), S( -13, -17), S( -14, -12), 
S( -11, -11), S( -13, -11), S(  -4, -12), S(   8,  -9), S(  11, -10), S(   2, -10), S( -10, -10), S(  -4, -12), 
S( -15, -13), S(  -5,  -5), S(   1, -10), S(   4,   7), S(  10,   5), S(   4, -10), S(  13, -13), S( -17, -14), 
S(  -1,  -4), S(   0,  -2), S(  10,  12), S(   9,  12), S(   9,  14), S(  13,   2), S(  -2,  -7), S( -10,  -5), 
S(   6,  -2), S(  12,  10), S(   4,  11), S(  20,  18), S(  18,  14), S(  16,  14), S(  12,   8), S(  11,  -6), 
S(  -9, -12), S(   0,  -9), S(  12,  11), S(  20,  14), S(  20,   6), S(  20,  11), S(  15,  -8), S(  -3, -10), 
S( -19, -17), S( -15, -11), S(  22,  -1), S(   4,  -5), S(  18,  -5), S(  18,  -8), S(   1, -12), S( -10, -15), 
S( -22, -19), S(  -6, -13), S(  -9, -11), S(  -8, -10), S(  -3, -10), S( -16, -15), S(  -6, -11), S( -17, -18), 

},

bishopPSQT[U8_MAX_SQUARES] = {

S(   4, -12), S(  -4, -10), S(  14, -10), S(   6,  -2), S(  -2,  -4), S( -11,  -6), S(  -3, -12), S(  -6, -11), 
S(  -7,  -9), S(  23,  -1), S(  13,  -9), S(  12,   1), S(  12,   2), S(  16,  -3), S(  20,   8), S(   0, -11), 
S(  16,  -8), S(  16,   2), S(  17,   7), S(   5,   9), S(  11,  12), S(  16,   4), S(   8,  -7), S(   7,  -9), 
S(  -6,  -6), S(   4,  -2), S(   5,   9), S(  18,   6), S(  18,   9), S(  10,  10), S(   8,  -9), S( -13, -10), 
S( -13,   1), S(  -5,   9), S(   5,   6), S(  13,  12), S(  19,  10), S(   2,  -2), S(  14,  -1), S(  -8,  -8), 
S( -11,  -3), S(  -1,   2), S(  19,   5), S(   8,   9), S(  16,   4), S(  15,   9), S(  12,   1), S(  18,   0), 
S( -18, -14), S(  -6,  -2), S( -10,  -3), S(  -6, -11), S(   1,  -2), S(  16,  -6), S(   4,  -3), S(   3, -16), 
S( -14, -10), S( -12, -13), S(  -7, -11), S( -11,  -9), S( -11, -11), S( -10,  -9), S(  -2, -10), S( -11,  -9), 

},

rookPSQT[U8_MAX_SQUARES] = {

S(  -8,  -4), S(  -6,  -4), S(   2,  -5), S(   3,   0), S(  10, -10), S(   3,  -5), S( -19, -11), S(  -7, -15), 
S( -18,  -9), S( -11,  -6), S( -13,  -2), S(  -8,  -4), S(  -8,  -7), S(  -3,  -8), S(   0,  -6), S( -17, -11), 
S( -15,  -9), S(  -9,  -6), S( -10,  -6), S(   0,  -8), S(  -4,  -6), S(  -3, -10), S(   0, -11), S(  -3, -11), 
S( -15,  -4), S( -12,  -3), S( -15,   0), S(  -8,  -2), S( -11,  -4), S( -10,  -7), S(  -3,  -9), S(  -8, -13), 
S( -14,   0), S(  -7,  -2), S(   0,   2), S(   5,  -3), S(  -6,  -5), S(   1,  -3), S(   2,  -5), S(   6, -10), 
S(   0,   3), S(  -3,   5), S(  -4,   2), S(   5,   0), S(   8,  -5), S(  10,  -2), S(   8,   0), S(   7,  -8), 
S(  -8,   3), S( -12,  11), S(   5,   7), S(  10,   5), S(   1,  -2), S(  11,   1), S(  11,  -1), S(   5,  -7), 
S(   3,  10), S(   3,   4), S(   2,   4), S(   2,  -1), S(   5,  -1), S(   3,  -5), S(   2,  -4), S(  -2,  -1), 

},

queenPSQT[U8_MAX_SQUARES] = {

S(   7,  -3), S(  -3,  -6), S(   2,  -4), S(  13, -14), S(   2,   0), S(  -9, -10), S( -10,  -8), S(  -6,  -8), 
S(  -6,  -4), S(   3,   2), S(   6,   2), S(  10,   8), S(  12,   7), S(  13,  -5), S(   7,  -6), S(   1,  -3), 
S(  -9, -11), S(  10, -12), S(   5,  10), S(   5,   3), S(   3,   9), S(  13,   9), S(  12,   9), S(  -2,  -2), 
S(  -3,  -5), S(  -5,   4), S(  -7,   5), S(  -8,  15), S(   3,  11), S(   3,   7), S(   7,   8), S(  -2,  -2), 
S( -14, -11), S(  -8,   1), S( -11,   0), S( -15,  13), S(   4,  14), S(   3,  13), S(  -3,   9), S(   8,   5), 
S( -14, -14), S( -12,  -7), S(   8,  10), S(   4,   7), S(  16,  17), S(  12,  11), S(  17,  12), S(  13,   7), 
S( -15, -10), S( -19, -13), S( -14,   1), S(  -5,  10), S( -11,   8), S(  17,  18), S(  10,  12), S(  18,   3), 
S( -13,  -8), S(  -5,  -1), S(   5,   5), S(  10,  12), S(  10,  11), S(  10,  10), S(  -2,  -4), S(  -1,   8), 

},

kingPSQT[U8_MAX_SQUARES] = {

S( -14, -17), S(   8, -13), S(   8, -12), S( -19, -18), S(   5, -16), S( -20, -15), S(   9, -15), S( -10, -21), 
S(  -2, -14), S(  -4,  -1), S(  -6,   4), S( -18,   7), S( -19,   6), S( -10,  10), S(   4,  10), S(   3, -12), 
S(  -4, -14), S(   7,   4), S(  -6,   9), S( -11,  12), S(  -9,  12), S(  -1,  14), S(   7,  13), S( -12,  -3), 
S(  -3, -14), S(   6,   5), S(   7,  10), S(   1,  11), S(   4,  13), S(   2,  14), S(   2,  14), S( -10,  -5), 
S(   0,  -9), S(   6,  10), S(   9,  12), S(   8,  11), S(   5,   9), S(   9,  16), S(  11,  18), S(  -3,   8), 
S(   2,   0), S(  13,  17), S(   8,  13), S(   8,   8), S(   5,   9), S(  11,  17), S(  15,  21), S(   4,  12), 
S(   2,   2), S(   9,  14), S(   7,   7), S(   4,  -2), S(   5,   1), S(   9,  14), S(   7,  17), S(   1,   9), 
S(   1,  -7), S(   4,   4), S(   2,  -5), S(   1,  -7), S(   3,  -6), S(   4,   2), S(   3,   5), S(   0,  -3), 

};


#endif
